{"title":"Spatial Viz","markdown":{"yaml":{"title":"Spatial Viz"},"headingText":"Review","containsRefs":false,"markdown":"\n\nUse this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.\n\n\nIn the previous activity, we explored a Simpson's Paradox--it seemed that - states with higher spending...\n- tend to have lower average SAT scores.\n\nBUT this was explained by a *confounding* (aka *omitted* and *lurking*) variable which is the % of students in a state that take the SAT.\nHence,\n\n-   States with higher spending...\n-   tend to have a higher % of students of students that take the SAT...\n-   which then \"leads to\" lower average SAT scores.\n\nThus, *when controlling for the % of students that take the SAT*, more spending is correlated with higher scores.\n\nLet's explore a Simpson's paradox related to Mac!\n\nBack in the 2000s, Macalester invested in insulating a few campus-owned houses, with the hopes of leading to energy savings.\n<!-- 180/182 Vernon Ave, 1662 Princeton Ave, and 1668 Princeton Ave --> Former Mac Prof Danny Kaplan accessed monthly data on energy use and other info for these addresses, before and after renovations:\n\n```{r}\n# Load tidyverse package for plotting and wrangling\nlibrary(tidyverse)\n\n# Import the data and only keep 2 addresses\nenergy <- read.csv(\"https://mac-stat.github.io/data/MacNaturalGas.csv\") |> \n  mutate(date = as.Date(paste0(month, \"/1/\", year), \"%m/%d/%Y\")) |> \n  filter(address != \"c\")\n\n# Check it out\nhead(energy)\n```\n\nThe part of dataset codebook is below:\n\n| variable | meaning |\n|:-----------------|:-----------------------------------------------------|\n| therms | a measure of energy use–the more energy used, the larger the therms |\n| address | a or b |\n| renovated | whether the location had been renovated, yes or no |\n| month | from 1 (January) to 12 (December) |\n| hdd | monthly **h**eating **d**egree **d**ays.  A proxy measure of outside temperatures–the higher the hdd, the COLDER it was outside |\n\n## Examples\n\n::: {.callout-important title=\"Instructions\"}\n-   Construct a plot that addresses each research question\n-   Include a 1-sentence summary of the plot.\n:::\n\n\n### Example 1 {.unnumbered}\n\nWhat was range in, and typical, energy used each month, as measured by `therms`?\nHow does this differ by address?\n\n```{r}\nggplot(energy, aes(x = therms, fill = address)) + \n  geom_density(alpha = 0.5)\n```\n\n### Example 2 {.unnumbered}\n\nHow did energy use (`therms`) change over time (`date`) at the two addresses?\n\n```{r}\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_point()\n\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_line()\n```\n\n### Example 3 {.unnumbered}\n\nHow did the typical energy use (`therms`) at the two addresses change before and after they were `renovated`?\n\n```{r}\nggplot(energy, aes(y = therms, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n\nggplot(energy, aes(x = therms, fill = renovated)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ address)\n```\n\n### Example 4 {.unnumbered}\n\nThat seems unfortunate that energy usage went *up* after renovations.\nBut also fishy.\n\nTake 5 minutes in your groups to try and explain what's going on here.\nThink: What *confounding*, *lurking*, or *omitted* variable related to energy usage are we ignoring here?\nTry to make some plots to prove your point.\n\n```{r}\nggplot(energy, aes(y = hdd, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\nggplot(energy, aes(y = therms, x = hdd, color = renovated)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ address)\n```\n\n### Example 5 {.unnumbered}\n\nLet's summarize the punchlines by filling in the ???.\nIt seemed that:\n\n-   After renovation...\n-   energy use increased.\n\nBUT this was explained by a *confounding* or *omitted* or *lurking* variable: ???\n\n-   After renovation...\n-   it was colder outside\n-   which then leads to higher energy use.\n\nThus, *when controlling for* ???,\nrenovations led to *decreased* energy use.\n\n## New stuff\n\n**Types of spatial viz:**\n\n-   **Point Maps**: plotting locations of *individual observations*\\\n    example: [bigfoot sightings](https://experience.arcgis.com/experience/9cc90686aa164853a1355f310f66ede0)\n\n-   **Contour Maps**: plotting the *density* or distribution of observations (not the individual observations themselves)\n\n-   **Choropleth Maps**: plotting outcomes in different *regions*\n\n    -   [NYT article on effects of redlining](https://www.nytimes.com/interactive/2020/08/24/climate/racism-redlining-cities-global-warming.html?fbclid=IwAR1iX20gZcHt-HERYeJs0t2fjSXRJh2aBYYSfSkpc50dBvfByBCWezTSXbw)\n    -   [Minnesota Reformer article on how Mpls / St Paul voted on 2021 ballot measures related to mayoral, policing, and rent policies](https://minnesotareformer.com/2021/11/04/maps-how-minneapolis-voted-on-key-ballot-questions/)\n\nThese spatial maps can be **static** or **dynamic/interactive**.\n\n## Exercises\n\n### Preview\n\nYou'll explore some R spatial viz tools below.\nIn general, there are two important pieces to every map:\n\n**Piece 1: A dataset**\n\nThis dataset must include either:\n\n-   location coordinates for your points of interest (for point maps); or\n-   variable outcomes for your regions of interest (for choropleth maps)\n\n\\\n\n**Piece 2: A background map**\n\nWe need latitude and longitude coordinates to specify the boundaries for your regions of interest (eg: countries, states).\nThis is where it gets really sticky!\n\n-   County-level, state-level, country-level, continent-level info live in multiple places.\n\n-   Where we grab this info *can* depend upon whether we want to make a point map or a choropleth map.\n    (The background maps can be used somewhat interchangeably, but it requires extra code :/)\n\n-   Where we grab this info can also depend upon the structure of our data and how much data wrangling / cleaning we're up for.\n    For choropleth maps, the labels of regions in our data must match those in the background map.\n    For example, if our data labels states with their abbreviations (eg: MN) and the background map refers to them as full names in lower case (eg: minnesota), we have to wrangle our data so that it matches the background map.\n\nIn short, the code for spatial viz gets very specialized.\nThe goal of these exercises is to:\n\n-   play around and experience the wide variety of spatial viz tools out there\n-   understand the difference between point maps and choropleth maps\n-   have fun\n\nYou can skip around as you wish and it's totally fine if you don't finish everything.\nJust come back at some point to play around.\n\n### Part 1: Interactive points on a map with `leaflet`\n\n[Leaflet](https://leafletjs.com/) is an open-source JavaScript library for creating maps.\nWe can use it inside R through the `leaflet` package.\n\nThis uses a different plotting framework than `ggplot2`, but still has a `tidyverse` feel (which will become more clear as we learn other tidyverse tools!).\n\nThe general steps are as follows:\n\n1.  Create a *map widget* by calling `leaflet()` and telling it the data to use.\n2.  Add a *base map* using `addTiles()` (the default) or `addProviderTiles()`.\n3.  Add *layers* to the map using layer functions (e.g. `addMarkers()`, `addPolygons()`).\n4.  Print the map widget to *display* it.\n\n#### Exercise 1: A leaflet with markers / points {.unnumbered}\n\nEarlier this semester, I asked for the latitude and longitude of one of your favorite places.\nI rounded these to the nearest whole number, so that they're near to but not exactly at those places.\nLet's load the data and map it!\n\n```{r}\nfave_places <- read.csv(\"https://ajohns24.github.io/data/112/our_fave_places.csv\")\n\n# Check it out\nhead(fave_places)\n```\n\n##### Part a {.unnumbered}\n\nYou can use a \"two-finger scroll\" to zoom in and out.\n\n```{r}\n# Load the leaflet package\nlibrary(leaflet)\n\n# Just a plotting frame\nleaflet(data = fave_places)\n```\n\n```{r}\n# Now what do we have?\nleaflet(data = fave_places) |> \n  addTiles()\n```\n\n```{r}\n# Now what do we have?\n# longitude and latitude refer to the variables in our data\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addMarkers(lng = ~longitude, lat = ~latitude)\n```\n\n```{r}\n# Since we named them \"longitude\" and \"latitude\", the function\n# automatically recognizes these variables. No need to write them!\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addMarkers()\n```\n\n##### Part b {.unnumbered}\n\n**PLAY AROUND!** This map is interactive.\nZoom in on one location.\nKeep zooming -- what level of detail can you get into?\nHow does that detail depend upon where you try to zoom in (thus what are the limitations of this tool)?\nThere are fewer details in places that are mostly green space. There are boxes for residential areas in the US with labeling of the address number. There are not always addresses even in residential areas for places outside Europe and the US. Rural places are also less detailed than urban areas. \n\n#### Exercise 2: Details {.unnumbered}\n\nWe can change all sorts of details in leaflet maps.\n\n```{r}\n# Load package needed to change color\nlibrary(gplots)\n\n# We can add colored circles instead of markers at each location\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addCircles(color = col2hex(\"red\"))\n```\n\n```{r}\n# We can change the background\n# Mark locations with yellow dots\n# And connect the dots, in their order in the dataset, with green lines\n# (These green lines don't mean anything here, but would if this were somebody's travel path!)\nleaflet(data = fave_places) |>\n  addProviderTiles(\"USGS\") |>\n  addCircles(weight = 10, opacity = 1, color = col2hex(\"yellow\")) |>\n  addPolylines(\n    lng = ~longitude,\n    lat = ~latitude,\n    color = col2hex(\"green\")\n  )\n```\n\nIn general:\n\n-   `addProviderTiles()` changes the base map.\\\n    To explore all available provider base maps, type `providers` in the console.\n    (Though some don't work :/)\n\n-   Use `addMarkers()` or `addCircles()` to mark locations.\n    Type `?addControl` into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them.\n    For example:\n\n    -   `weight` = how thick to make the lines, points, pixels\n    -   `opacity` = transparency (like `alpha` in `ggplot2`)\n    -   colors need to be in \"hex\" form. We used the `col2hex()` function from the `gplots` library to do that\n\n#### Exercise 3: Your turn {.unnumbered}\n\nThe `starbucks` data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected, including `Latitude` and `Longitude`:\n\n```{r}\n# Import starbucks location data\nstarbucks <- read.csv(\"https://mac-stat.github.io/data/starbucks.csv\")\n```\n\nLet's focus on only those in Minnesota for now:\n\n```{r}\n# Don't worry about the syntax\nstarbucks_mn <- starbucks |>   \n  filter(Country == \"US\", State.Province == \"MN\")\n```\n\nCreate a leaflet map of the Starbucks locations in Minnesota.\nKeep it simple -- go back to Exercise 1 for an example.\n\n```{r}\nleaflet(data = starbucks_mn) |> \n  addTiles() |> \n  addMarkers()\n```\n\n\n### Part 2: Static points on a map\n\nLeaflet is very powerful and fun.\nBut:\n\n-   It's not great when we have lots of points to map -- it takes lots of time.\n-   It makes good interactive maps, but we often need a static map (eg: we can print interactive maps!).\n\nLet's explore how to make point maps with `ggplot()`, not `leaflet()`.\n\n#### Exercise 3: A simple scatterplot {.unnumbered}\n\nLet's start with the `ggplot()` tools we already know.\nConstruct a scatterplot of all `starbucks` locations, not just those in Minnesota, with:\n\n-   Latitude and Longitude coordinates (which goes on the y-axis?!)\n-   Make the points transparent (alpha = 0.2) and smaller (size = 0.2)\n\nIt's pretty cool that the plots we already know can provide some spatial context.\nBut what *don't* you like about this plot?\n\n```{r}\nggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n```\n\n#### Exercise 4: Adding a country-level background {.unnumbered}\n\nLet's add a background map of *country-level* boundaries.\n\n#### Part a {.unnumbered}\n\nFirst, we can grab country-level boundaries from the `rnaturalearth` package.\n\n```{r}\n# Load the package\nlibrary(rnaturalearth)\n\n# Get info about country boundaries across the world\n# in a \"sf\" or simple feature format\nworld_boundaries <- ne_countries(returnclass = \"sf\")\n```\n\nIn your **console**, type `world_boundaries` to check out what's stored there.\nDon't print it our in your Rmd -- printing it would be really messy there (even just the `head()`).\n\n##### Part b {.unnumbered}\n\nRun the chunks below to build up a new map.\n\n```{r}\n# What does this code produce?\n# What geom are we using for the point map?\nggplot(world_boundaries) + \n  geom_sf()\n```\n\n```{r}\n# Load package needed to change map theme\nlibrary(mosaic)\n\n# Add a point for each Starbucks\n# NOTE: The Starbucks info is in our starbucks data, not world_boundaries\n# How does this change how we use geom_point?!\nggplot(world_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3, size = 0.2, color = \"darkgreen\"\n  ) +\n  theme_map()\n```\n\n##### Part c {.unnumbered}\n\nSummarize what you learned about Starbucks from this map.\nStarbucks is most present in the United States, Europe, and parts Asia specifically on the coasts like Japan and coastal China. \n\n#### Exercise 5: Zooming in on some countries {.unnumbered}\n\nInstead of `world_boundaries <- ne_countries(returnclass = 'sf')` we could zoom in on...\n\n-   the continent of Africa: `ne_countries(continent = 'Africa', returnclass = 'sf')`\n-   a set of countries: `ne_countries(country = c('france', 'united kingdom', 'germany'), returnclass = 'sf')`\n-   boundaries within a country: `ne_states(country = 'united states of america', returnclass = 'sf')`\n\nOur goal here will be to map the Starbucks locations in Canada, Mexico, and the US.\n\n##### Part a {.unnumbered}\n\nTo make this map, we again need two pieces of information.\n\n1.  Data on Starbucks for *only* Canada, Mexico, and the US, labeled as \"CA\", \"MX\", \"US\" in the `starbucks` data.\n\n```{r}\n# We'll learn this syntax soon! Don't worry about it now.\nstarbucks_cma <- starbucks |> \n  filter(Country %in% c('CA', 'MX', 'US'))\n```\n\n2.  A background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires `ne_states()` in the `rnaturalearth` package where the countries are labeled 'canada', 'mexico', 'united states of america'.\n\n```{r}\ncma_boundaries <- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n```\n\n##### Part b {.unnumbered}\n\nMake the map!\n\n```{r}\n# Just the boundaries\nggplot(cma_boundaries) + \n  geom_sf()\n```\n\n```{r}\n# Add the points\n# And zoom in\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50)) +\n  theme_map()\n```\n\n#### Exercise 6: A state and county-level map {.unnumbered}\n\nLet's get an even *higher* resolution map of Starbucks locations within the states of Minnesota, Wisconsin, North Dakota, and South Dakota, with a background map at the county-level.\n\n#### Part a {.unnumbered}\n\nTo make this map, we again need two pieces of information.\n\n1.  Data on Starbucks for *only* the states of interest.\n\n```{r}\nstarbucks_midwest <- starbucks |> \n  filter(State.Province %in% c(\"MN\", \"ND\", \"SD\", \"WI\"))\n```\n\n2.  A background map of state- and county-level boundaries in these states. This requires `st_as_sf()` in the `sf` package, and `map()` in the `maps` package, where the countries are labeled 'minnesota', 'north dakota', etc.\n\n```{r}\n# Load packages\nlibrary(sf)\nlibrary(maps)\n\n# Get the boundaries\nmidwest_boundaries <- st_as_sf(\n  maps::map(\"county\",\n            region = c(\"minnesota\", \"wisconsin\", \"north dakota\", \"south dakota\"), \n            fill = TRUE, plot = FALSE))\n\n# Check it out\nhead(midwest_boundaries)\n```\n\n##### Part b {.unnumbered}\n\nAdjust the code below to make the plot!\nRemove the `#` to run it.\n\n```{r}\nggplot(midwest_boundaries) +\n  geom_sf() +\n  geom_point(\n    data = starbucks_midwest,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.7,\n    size = 0.2,\n    color = 'darkgreen'\n  ) +\n  theme_map()\n```\n\n#### Exercise 7: Contour maps {.unnumbered}\n\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher *density*.\nConsider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\n```{r}\n# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\nNow check out the contour map.\n\n```{r}\n# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\n### Part 3: Choropleth maps\n\nSpatial data isn't always in the form of point locations!\nFor example, recall the state and county-level data on presidential elections.\n\n```{r}\nelections_by_state <-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n```\n\nIn these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.\nLet's wrangle our data first.\nWe'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\n```{r}\n# Don't worry about the code!\n\nelections_by_state <- elections_by_state |> \n  filter(state_abbr != \"DC\") |> \n  select(state_name, state_abbr, repub_pct_20) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties <- elections_by_counties |> \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n```\n\n#### Exercise 8: State-level choropleth maps {.unnumbered}\n\nLet's map the 2020 Republican support in each *state*, `repub_pct_20`.\n\n#### Part a {.unnumbered}\n\nWe again need two pieces of information.\n\n1.  Data on elections in each state, which we already have: `elections_by_state`.\n\n2.  A background map of state boundaries in the US.\n    The boundaries we used for point maps don't work here.\n    (Optional detail: they're `sf` objects and we now need a `data.frame` object.) Instead, we can use the `map_data()` function from the `ggplot2` package:\n\n```{r}\n# Get the latitude and longitude coordinates of state boundaries\nstates_map <- map_data(\"state\")\n\n# Check it out\nhead(states_map)\n```\n\n##### Pause {.unnumbered}\n\n**Important detail:** Note that the `region` variable in `states_map`, and the `state_name` variable in `elections_by_state` both label states by the full name in lower case letters.\nThis is critical to the background map and our data being able to communicate.\n\n```{r}\nhead(states_map)\nhead(elections_by_state) \n```\n\n##### Part b {.unnumbered}\n\nNow map `repub_pct_20` by state.\n\n```{r}\n# Note where the dataset, elections_by_state, is used\n# Note where the background map, states_map, is used\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() \n```\n\n```{r}\n# Make it nicer!\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_gradientn(name = \"% Republican\", colors = c(\"blue\", \"purple\", \"red\"), values = scales::rescale(seq(0, 100, by = 5)))\n```\n\nIt's not easy to get fine control over the color scale for the quantitative `repub_pct_20` variable.\nInstead, let's plot the *discretized* version, `repub_20_categories`:\n\n```{r}\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n```\n\n```{r}\n# Load package needed for refining color palette\nlibrary(RColorBrewer)\n\n# Now fix the colors\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n```\n\n##### Part c {.unnumbered}\n\nWe can add other layers, like points, on top of a choropleth map.\nAdd a Starbucks layer!\nDo you notice any relationship between Starbucks and elections?\nStarbucks are in cities, and cities tend to be more democratic\nOr are we just doing things at this point?\n;)\n\n```{r}\n# Get only the starbucks data from the US\nstarbucks_us <- starbucks |> \n  filter(Country == \"US\")\n\n# Map it\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  geom_point(\n    data = starbucks_us,\n    aes(x = Longitude, y = Latitude),\n    size = 0.05,\n    alpha = 0.2,\n    inherit.aes = FALSE\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n```\n\n**Details (if you're curious)**\n\n-   `map_id` is a required aesthetic for `geom_map()`.\n    -   It specifies which variable in our dataset indicates the region (here `state_name`).\n    -   It connects this variable (`state_name`) to the `region` variable in our mapping background (`states_map`). These variables must have the same possible outcomes in order to be matched up (`alabama`, `alaska`, `arizona`,...).\n-   `expand_limits()` assures that the map covers the entire area it's supposed to, by pulling longitudes and latitudes from the `states_map`.\n\n##### Part d {.unnumbered}\n\nWe used `geom_sf()` for point maps.\nWhat `geom` do we use for choropleth maps?\n\n### Exercise 9: County-level choropleth maps {.unnumbered}\n\nLet's map the 2020 Republican support in each *county*.\n\n##### Part a {.unnumbered}\n\nWe again need two pieces of information.\n\n1.  Data on elections in each county, which we already have: `elections_by_county`.\n\n2.  A background map of county boundaries in the US, stored in the `county_map` dataset in the `socviz` package:\n\n```{r}\n# Get the latitude and longitude coordinates of county boundaries\nlibrary(socviz)\ndata(county_map) \n\n# Check it out\nhead(county_map)\n```\n\n##### Pause {.unnumbered}\n\n**Important detail:** We officially have a headache.\nOur `county_map` refers to each county by a **5-number** `id`.\nOur `elections_by_counties` data refers to each county by a `county_fips` code, which is *mostly* the same as `id`, BUT drops any 0's at the beginning of the code.\n\n```{r}\nhead(county_map)\nhead(elections_by_counties)\n```\n\nThis just means that we have to wrangle the data so that it can communicate with the background map.\n\n```{r}\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties <- elections_by_counties |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n```\n\n##### Part b {.unnumbered}\n\n*Now* map Republican support by county.\nLet's go straight to the discretized `repub_20_categories` variable, and a good color scale.\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +\n  geom_map(map = county_map) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal()\n```\n\n#### Exercise 10: Play around! {.unnumbered}\n\nConstruct county-level maps of `median_rent` and `median_age`.\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median rent\", colors = c(\"white\", \"lightgreen\", \"darkgreen\"))\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median age\", colors = terrain.colors(10))\n```\n\n\n#### Exercise 11: Choropleth maps with leaflet {.unnumbered}\n\nThough `ggplot()` is often better for this purpose, we can also make choropleth maps with `leaflet()`.\nIf you're curious, check out the `leaflet` documentation:\n\n<https://rstudio.github.io/leaflet/choropleths.html>\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n### Example 1 {.unnumbered}\n\nBoth addresses used between 0 and 450 therms per month.\nThere seem to be two types of months -- those with lower use around 50 therms and those with higher use around 300/400 therms.\n\n```{r}\nggplot(energy, aes(x = therms, fill = address)) + \n  geom_density(alpha = 0.5)\n```\n\n### Example 2 {.unnumbered}\n\nEnergy use is seasonal, with higher usage in winter months.\nIt seems that address a uses slightly more energy.\n\n```{r}\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_point()\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_line()\n```\n\n### Example 3 {.unnumbered}\n\nAt both addresses, typical energy use *increased* after renovations.\n\n```{r}\nggplot(energy, aes(y = therms, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n# A density plot isn't very helpful for comparing typical therms in this example!\nggplot(energy, aes(x = therms, fill = renovated)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ address)\n```\n\n### Example 4 {.unnumbered}\n\nlurking variable = outdoor temperature (as reflected by hdd)\n\n```{r}\n# It happened to be colder outside after renovations (higher hdd)\nggplot(energy, aes(y = hdd, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n# When controlling for outside temps (via hdd), energy use decreased post-renovation\nggplot(energy, aes(y = therms, x = hdd, color = renovated)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ address)\n```\n\n### Example 5 {.unnumbered}\n\nBUT this was explained by a *confounding* or *omitted* or *lurking* variable: `hdd` (outdoor temperature)\n\n-   After renovation...\n-   *it happened to be colder*...\n-   which then leads to higher energy use.\n\nThus, *when controlling for* outdoor temps, renovations led to *decreased* energy use.\n\n### Exercise 3: Your turn {.unnumbered}\n\n```{r}\nleaflet(data = starbucks_mn) |> \n  addTiles() |> \n  addMarkers()\n```\n\n### Exercise 3: A simple scatterplot {.unnumbered}\n\nIt would be nice to also have some actual reference maps of countries in the background.\n\n```{r}\nggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n```\n\n### Exercise 6: A state and county-level map {.unnumbered}\n\n#### Part b {.unnumbered}\n\nAdjust the code below to make the plot!\nRemove the `#` to run it.\n\n```{r}\nggplot(midwest_boundaries) +\n  geom_sf() +\n  geom_point(\n    data = starbucks_midwest,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.7,\n    size = 0.2,\n    color = 'darkgreen'\n  ) +\n  theme_map()\n```\n\n### Exercise 7: Contour maps {.unnumbered}\n\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher *density*.\nConsider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\n```{r}\n# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\nNow check out the contour map.\n\n```{r}\n# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\n### Exercises Part 3: Choropleth maps {.unnumbered}\n\nSpatial data isn't always in the form of point locations!\nFor example, recall the state and county-level data on presidential elections.\n\n```{r}\nelections_by_state <-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n```\n\nIn these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.\nLet's wrangle our data first.\n\nWe'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\n```{r}\n# Don't worry about the code!\n\nelections_by_state <- elections_by_state |> \n  filter(state_abbr != \"DC\") |> \n  select(state_name, state_abbr, repub_pct_20) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties <- elections_by_counties |> \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties <- elections_by_counties |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n```\n\n### Exercise 8: State-level choropleth maps {.unnumbered}\n\n#### Part d {.unnumbered}\n\n`geom_map()`\n\n### Exercise 10: Play around! {.unnumbered}\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median rent\", colors = c(\"white\", \"lightgreen\", \"darkgreen\"))\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median age\", colors = terrain.colors(10))\n```\n\n</details>\n","srcMarkdownNoYaml":"\n\nUse this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.\n\n## Review\n\nIn the previous activity, we explored a Simpson's Paradox--it seemed that - states with higher spending...\n- tend to have lower average SAT scores.\n\nBUT this was explained by a *confounding* (aka *omitted* and *lurking*) variable which is the % of students in a state that take the SAT.\nHence,\n\n-   States with higher spending...\n-   tend to have a higher % of students of students that take the SAT...\n-   which then \"leads to\" lower average SAT scores.\n\nThus, *when controlling for the % of students that take the SAT*, more spending is correlated with higher scores.\n\nLet's explore a Simpson's paradox related to Mac!\n\nBack in the 2000s, Macalester invested in insulating a few campus-owned houses, with the hopes of leading to energy savings.\n<!-- 180/182 Vernon Ave, 1662 Princeton Ave, and 1668 Princeton Ave --> Former Mac Prof Danny Kaplan accessed monthly data on energy use and other info for these addresses, before and after renovations:\n\n```{r}\n# Load tidyverse package for plotting and wrangling\nlibrary(tidyverse)\n\n# Import the data and only keep 2 addresses\nenergy <- read.csv(\"https://mac-stat.github.io/data/MacNaturalGas.csv\") |> \n  mutate(date = as.Date(paste0(month, \"/1/\", year), \"%m/%d/%Y\")) |> \n  filter(address != \"c\")\n\n# Check it out\nhead(energy)\n```\n\nThe part of dataset codebook is below:\n\n| variable | meaning |\n|:-----------------|:-----------------------------------------------------|\n| therms | a measure of energy use–the more energy used, the larger the therms |\n| address | a or b |\n| renovated | whether the location had been renovated, yes or no |\n| month | from 1 (January) to 12 (December) |\n| hdd | monthly **h**eating **d**egree **d**ays.  A proxy measure of outside temperatures–the higher the hdd, the COLDER it was outside |\n\n## Examples\n\n::: {.callout-important title=\"Instructions\"}\n-   Construct a plot that addresses each research question\n-   Include a 1-sentence summary of the plot.\n:::\n\n\n### Example 1 {.unnumbered}\n\nWhat was range in, and typical, energy used each month, as measured by `therms`?\nHow does this differ by address?\n\n```{r}\nggplot(energy, aes(x = therms, fill = address)) + \n  geom_density(alpha = 0.5)\n```\n\n### Example 2 {.unnumbered}\n\nHow did energy use (`therms`) change over time (`date`) at the two addresses?\n\n```{r}\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_point()\n\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_line()\n```\n\n### Example 3 {.unnumbered}\n\nHow did the typical energy use (`therms`) at the two addresses change before and after they were `renovated`?\n\n```{r}\nggplot(energy, aes(y = therms, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n\nggplot(energy, aes(x = therms, fill = renovated)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ address)\n```\n\n### Example 4 {.unnumbered}\n\nThat seems unfortunate that energy usage went *up* after renovations.\nBut also fishy.\n\nTake 5 minutes in your groups to try and explain what's going on here.\nThink: What *confounding*, *lurking*, or *omitted* variable related to energy usage are we ignoring here?\nTry to make some plots to prove your point.\n\n```{r}\nggplot(energy, aes(y = hdd, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\nggplot(energy, aes(y = therms, x = hdd, color = renovated)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ address)\n```\n\n### Example 5 {.unnumbered}\n\nLet's summarize the punchlines by filling in the ???.\nIt seemed that:\n\n-   After renovation...\n-   energy use increased.\n\nBUT this was explained by a *confounding* or *omitted* or *lurking* variable: ???\n\n-   After renovation...\n-   it was colder outside\n-   which then leads to higher energy use.\n\nThus, *when controlling for* ???,\nrenovations led to *decreased* energy use.\n\n## New stuff\n\n**Types of spatial viz:**\n\n-   **Point Maps**: plotting locations of *individual observations*\\\n    example: [bigfoot sightings](https://experience.arcgis.com/experience/9cc90686aa164853a1355f310f66ede0)\n\n-   **Contour Maps**: plotting the *density* or distribution of observations (not the individual observations themselves)\n\n-   **Choropleth Maps**: plotting outcomes in different *regions*\n\n    -   [NYT article on effects of redlining](https://www.nytimes.com/interactive/2020/08/24/climate/racism-redlining-cities-global-warming.html?fbclid=IwAR1iX20gZcHt-HERYeJs0t2fjSXRJh2aBYYSfSkpc50dBvfByBCWezTSXbw)\n    -   [Minnesota Reformer article on how Mpls / St Paul voted on 2021 ballot measures related to mayoral, policing, and rent policies](https://minnesotareformer.com/2021/11/04/maps-how-minneapolis-voted-on-key-ballot-questions/)\n\nThese spatial maps can be **static** or **dynamic/interactive**.\n\n## Exercises\n\n### Preview\n\nYou'll explore some R spatial viz tools below.\nIn general, there are two important pieces to every map:\n\n**Piece 1: A dataset**\n\nThis dataset must include either:\n\n-   location coordinates for your points of interest (for point maps); or\n-   variable outcomes for your regions of interest (for choropleth maps)\n\n\\\n\n**Piece 2: A background map**\n\nWe need latitude and longitude coordinates to specify the boundaries for your regions of interest (eg: countries, states).\nThis is where it gets really sticky!\n\n-   County-level, state-level, country-level, continent-level info live in multiple places.\n\n-   Where we grab this info *can* depend upon whether we want to make a point map or a choropleth map.\n    (The background maps can be used somewhat interchangeably, but it requires extra code :/)\n\n-   Where we grab this info can also depend upon the structure of our data and how much data wrangling / cleaning we're up for.\n    For choropleth maps, the labels of regions in our data must match those in the background map.\n    For example, if our data labels states with their abbreviations (eg: MN) and the background map refers to them as full names in lower case (eg: minnesota), we have to wrangle our data so that it matches the background map.\n\nIn short, the code for spatial viz gets very specialized.\nThe goal of these exercises is to:\n\n-   play around and experience the wide variety of spatial viz tools out there\n-   understand the difference between point maps and choropleth maps\n-   have fun\n\nYou can skip around as you wish and it's totally fine if you don't finish everything.\nJust come back at some point to play around.\n\n### Part 1: Interactive points on a map with `leaflet`\n\n[Leaflet](https://leafletjs.com/) is an open-source JavaScript library for creating maps.\nWe can use it inside R through the `leaflet` package.\n\nThis uses a different plotting framework than `ggplot2`, but still has a `tidyverse` feel (which will become more clear as we learn other tidyverse tools!).\n\nThe general steps are as follows:\n\n1.  Create a *map widget* by calling `leaflet()` and telling it the data to use.\n2.  Add a *base map* using `addTiles()` (the default) or `addProviderTiles()`.\n3.  Add *layers* to the map using layer functions (e.g. `addMarkers()`, `addPolygons()`).\n4.  Print the map widget to *display* it.\n\n#### Exercise 1: A leaflet with markers / points {.unnumbered}\n\nEarlier this semester, I asked for the latitude and longitude of one of your favorite places.\nI rounded these to the nearest whole number, so that they're near to but not exactly at those places.\nLet's load the data and map it!\n\n```{r}\nfave_places <- read.csv(\"https://ajohns24.github.io/data/112/our_fave_places.csv\")\n\n# Check it out\nhead(fave_places)\n```\n\n##### Part a {.unnumbered}\n\nYou can use a \"two-finger scroll\" to zoom in and out.\n\n```{r}\n# Load the leaflet package\nlibrary(leaflet)\n\n# Just a plotting frame\nleaflet(data = fave_places)\n```\n\n```{r}\n# Now what do we have?\nleaflet(data = fave_places) |> \n  addTiles()\n```\n\n```{r}\n# Now what do we have?\n# longitude and latitude refer to the variables in our data\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addMarkers(lng = ~longitude, lat = ~latitude)\n```\n\n```{r}\n# Since we named them \"longitude\" and \"latitude\", the function\n# automatically recognizes these variables. No need to write them!\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addMarkers()\n```\n\n##### Part b {.unnumbered}\n\n**PLAY AROUND!** This map is interactive.\nZoom in on one location.\nKeep zooming -- what level of detail can you get into?\nHow does that detail depend upon where you try to zoom in (thus what are the limitations of this tool)?\nThere are fewer details in places that are mostly green space. There are boxes for residential areas in the US with labeling of the address number. There are not always addresses even in residential areas for places outside Europe and the US. Rural places are also less detailed than urban areas. \n\n#### Exercise 2: Details {.unnumbered}\n\nWe can change all sorts of details in leaflet maps.\n\n```{r}\n# Load package needed to change color\nlibrary(gplots)\n\n# We can add colored circles instead of markers at each location\nleaflet(data = fave_places) |> \n  addTiles() |> \n  addCircles(color = col2hex(\"red\"))\n```\n\n```{r}\n# We can change the background\n# Mark locations with yellow dots\n# And connect the dots, in their order in the dataset, with green lines\n# (These green lines don't mean anything here, but would if this were somebody's travel path!)\nleaflet(data = fave_places) |>\n  addProviderTiles(\"USGS\") |>\n  addCircles(weight = 10, opacity = 1, color = col2hex(\"yellow\")) |>\n  addPolylines(\n    lng = ~longitude,\n    lat = ~latitude,\n    color = col2hex(\"green\")\n  )\n```\n\nIn general:\n\n-   `addProviderTiles()` changes the base map.\\\n    To explore all available provider base maps, type `providers` in the console.\n    (Though some don't work :/)\n\n-   Use `addMarkers()` or `addCircles()` to mark locations.\n    Type `?addControl` into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them.\n    For example:\n\n    -   `weight` = how thick to make the lines, points, pixels\n    -   `opacity` = transparency (like `alpha` in `ggplot2`)\n    -   colors need to be in \"hex\" form. We used the `col2hex()` function from the `gplots` library to do that\n\n#### Exercise 3: Your turn {.unnumbered}\n\nThe `starbucks` data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected, including `Latitude` and `Longitude`:\n\n```{r}\n# Import starbucks location data\nstarbucks <- read.csv(\"https://mac-stat.github.io/data/starbucks.csv\")\n```\n\nLet's focus on only those in Minnesota for now:\n\n```{r}\n# Don't worry about the syntax\nstarbucks_mn <- starbucks |>   \n  filter(Country == \"US\", State.Province == \"MN\")\n```\n\nCreate a leaflet map of the Starbucks locations in Minnesota.\nKeep it simple -- go back to Exercise 1 for an example.\n\n```{r}\nleaflet(data = starbucks_mn) |> \n  addTiles() |> \n  addMarkers()\n```\n\n\n### Part 2: Static points on a map\n\nLeaflet is very powerful and fun.\nBut:\n\n-   It's not great when we have lots of points to map -- it takes lots of time.\n-   It makes good interactive maps, but we often need a static map (eg: we can print interactive maps!).\n\nLet's explore how to make point maps with `ggplot()`, not `leaflet()`.\n\n#### Exercise 3: A simple scatterplot {.unnumbered}\n\nLet's start with the `ggplot()` tools we already know.\nConstruct a scatterplot of all `starbucks` locations, not just those in Minnesota, with:\n\n-   Latitude and Longitude coordinates (which goes on the y-axis?!)\n-   Make the points transparent (alpha = 0.2) and smaller (size = 0.2)\n\nIt's pretty cool that the plots we already know can provide some spatial context.\nBut what *don't* you like about this plot?\n\n```{r}\nggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n```\n\n#### Exercise 4: Adding a country-level background {.unnumbered}\n\nLet's add a background map of *country-level* boundaries.\n\n#### Part a {.unnumbered}\n\nFirst, we can grab country-level boundaries from the `rnaturalearth` package.\n\n```{r}\n# Load the package\nlibrary(rnaturalearth)\n\n# Get info about country boundaries across the world\n# in a \"sf\" or simple feature format\nworld_boundaries <- ne_countries(returnclass = \"sf\")\n```\n\nIn your **console**, type `world_boundaries` to check out what's stored there.\nDon't print it our in your Rmd -- printing it would be really messy there (even just the `head()`).\n\n##### Part b {.unnumbered}\n\nRun the chunks below to build up a new map.\n\n```{r}\n# What does this code produce?\n# What geom are we using for the point map?\nggplot(world_boundaries) + \n  geom_sf()\n```\n\n```{r}\n# Load package needed to change map theme\nlibrary(mosaic)\n\n# Add a point for each Starbucks\n# NOTE: The Starbucks info is in our starbucks data, not world_boundaries\n# How does this change how we use geom_point?!\nggplot(world_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3, size = 0.2, color = \"darkgreen\"\n  ) +\n  theme_map()\n```\n\n##### Part c {.unnumbered}\n\nSummarize what you learned about Starbucks from this map.\nStarbucks is most present in the United States, Europe, and parts Asia specifically on the coasts like Japan and coastal China. \n\n#### Exercise 5: Zooming in on some countries {.unnumbered}\n\nInstead of `world_boundaries <- ne_countries(returnclass = 'sf')` we could zoom in on...\n\n-   the continent of Africa: `ne_countries(continent = 'Africa', returnclass = 'sf')`\n-   a set of countries: `ne_countries(country = c('france', 'united kingdom', 'germany'), returnclass = 'sf')`\n-   boundaries within a country: `ne_states(country = 'united states of america', returnclass = 'sf')`\n\nOur goal here will be to map the Starbucks locations in Canada, Mexico, and the US.\n\n##### Part a {.unnumbered}\n\nTo make this map, we again need two pieces of information.\n\n1.  Data on Starbucks for *only* Canada, Mexico, and the US, labeled as \"CA\", \"MX\", \"US\" in the `starbucks` data.\n\n```{r}\n# We'll learn this syntax soon! Don't worry about it now.\nstarbucks_cma <- starbucks |> \n  filter(Country %in% c('CA', 'MX', 'US'))\n```\n\n2.  A background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires `ne_states()` in the `rnaturalearth` package where the countries are labeled 'canada', 'mexico', 'united states of america'.\n\n```{r}\ncma_boundaries <- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n```\n\n##### Part b {.unnumbered}\n\nMake the map!\n\n```{r}\n# Just the boundaries\nggplot(cma_boundaries) + \n  geom_sf()\n```\n\n```{r}\n# Add the points\n# And zoom in\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50)) +\n  theme_map()\n```\n\n#### Exercise 6: A state and county-level map {.unnumbered}\n\nLet's get an even *higher* resolution map of Starbucks locations within the states of Minnesota, Wisconsin, North Dakota, and South Dakota, with a background map at the county-level.\n\n#### Part a {.unnumbered}\n\nTo make this map, we again need two pieces of information.\n\n1.  Data on Starbucks for *only* the states of interest.\n\n```{r}\nstarbucks_midwest <- starbucks |> \n  filter(State.Province %in% c(\"MN\", \"ND\", \"SD\", \"WI\"))\n```\n\n2.  A background map of state- and county-level boundaries in these states. This requires `st_as_sf()` in the `sf` package, and `map()` in the `maps` package, where the countries are labeled 'minnesota', 'north dakota', etc.\n\n```{r}\n# Load packages\nlibrary(sf)\nlibrary(maps)\n\n# Get the boundaries\nmidwest_boundaries <- st_as_sf(\n  maps::map(\"county\",\n            region = c(\"minnesota\", \"wisconsin\", \"north dakota\", \"south dakota\"), \n            fill = TRUE, plot = FALSE))\n\n# Check it out\nhead(midwest_boundaries)\n```\n\n##### Part b {.unnumbered}\n\nAdjust the code below to make the plot!\nRemove the `#` to run it.\n\n```{r}\nggplot(midwest_boundaries) +\n  geom_sf() +\n  geom_point(\n    data = starbucks_midwest,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.7,\n    size = 0.2,\n    color = 'darkgreen'\n  ) +\n  theme_map()\n```\n\n#### Exercise 7: Contour maps {.unnumbered}\n\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher *density*.\nConsider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\n```{r}\n# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\nNow check out the contour map.\n\n```{r}\n# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\n### Part 3: Choropleth maps\n\nSpatial data isn't always in the form of point locations!\nFor example, recall the state and county-level data on presidential elections.\n\n```{r}\nelections_by_state <-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n```\n\nIn these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.\nLet's wrangle our data first.\nWe'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\n```{r}\n# Don't worry about the code!\n\nelections_by_state <- elections_by_state |> \n  filter(state_abbr != \"DC\") |> \n  select(state_name, state_abbr, repub_pct_20) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties <- elections_by_counties |> \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n```\n\n#### Exercise 8: State-level choropleth maps {.unnumbered}\n\nLet's map the 2020 Republican support in each *state*, `repub_pct_20`.\n\n#### Part a {.unnumbered}\n\nWe again need two pieces of information.\n\n1.  Data on elections in each state, which we already have: `elections_by_state`.\n\n2.  A background map of state boundaries in the US.\n    The boundaries we used for point maps don't work here.\n    (Optional detail: they're `sf` objects and we now need a `data.frame` object.) Instead, we can use the `map_data()` function from the `ggplot2` package:\n\n```{r}\n# Get the latitude and longitude coordinates of state boundaries\nstates_map <- map_data(\"state\")\n\n# Check it out\nhead(states_map)\n```\n\n##### Pause {.unnumbered}\n\n**Important detail:** Note that the `region` variable in `states_map`, and the `state_name` variable in `elections_by_state` both label states by the full name in lower case letters.\nThis is critical to the background map and our data being able to communicate.\n\n```{r}\nhead(states_map)\nhead(elections_by_state) \n```\n\n##### Part b {.unnumbered}\n\nNow map `repub_pct_20` by state.\n\n```{r}\n# Note where the dataset, elections_by_state, is used\n# Note where the background map, states_map, is used\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() \n```\n\n```{r}\n# Make it nicer!\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_gradientn(name = \"% Republican\", colors = c(\"blue\", \"purple\", \"red\"), values = scales::rescale(seq(0, 100, by = 5)))\n```\n\nIt's not easy to get fine control over the color scale for the quantitative `repub_pct_20` variable.\nInstead, let's plot the *discretized* version, `repub_20_categories`:\n\n```{r}\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n```\n\n```{r}\n# Load package needed for refining color palette\nlibrary(RColorBrewer)\n\n# Now fix the colors\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n```\n\n##### Part c {.unnumbered}\n\nWe can add other layers, like points, on top of a choropleth map.\nAdd a Starbucks layer!\nDo you notice any relationship between Starbucks and elections?\nStarbucks are in cities, and cities tend to be more democratic\nOr are we just doing things at this point?\n;)\n\n```{r}\n# Get only the starbucks data from the US\nstarbucks_us <- starbucks |> \n  filter(Country == \"US\")\n\n# Map it\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  geom_point(\n    data = starbucks_us,\n    aes(x = Longitude, y = Latitude),\n    size = 0.05,\n    alpha = 0.2,\n    inherit.aes = FALSE\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n```\n\n**Details (if you're curious)**\n\n-   `map_id` is a required aesthetic for `geom_map()`.\n    -   It specifies which variable in our dataset indicates the region (here `state_name`).\n    -   It connects this variable (`state_name`) to the `region` variable in our mapping background (`states_map`). These variables must have the same possible outcomes in order to be matched up (`alabama`, `alaska`, `arizona`,...).\n-   `expand_limits()` assures that the map covers the entire area it's supposed to, by pulling longitudes and latitudes from the `states_map`.\n\n##### Part d {.unnumbered}\n\nWe used `geom_sf()` for point maps.\nWhat `geom` do we use for choropleth maps?\n\n### Exercise 9: County-level choropleth maps {.unnumbered}\n\nLet's map the 2020 Republican support in each *county*.\n\n##### Part a {.unnumbered}\n\nWe again need two pieces of information.\n\n1.  Data on elections in each county, which we already have: `elections_by_county`.\n\n2.  A background map of county boundaries in the US, stored in the `county_map` dataset in the `socviz` package:\n\n```{r}\n# Get the latitude and longitude coordinates of county boundaries\nlibrary(socviz)\ndata(county_map) \n\n# Check it out\nhead(county_map)\n```\n\n##### Pause {.unnumbered}\n\n**Important detail:** We officially have a headache.\nOur `county_map` refers to each county by a **5-number** `id`.\nOur `elections_by_counties` data refers to each county by a `county_fips` code, which is *mostly* the same as `id`, BUT drops any 0's at the beginning of the code.\n\n```{r}\nhead(county_map)\nhead(elections_by_counties)\n```\n\nThis just means that we have to wrangle the data so that it can communicate with the background map.\n\n```{r}\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties <- elections_by_counties |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n```\n\n##### Part b {.unnumbered}\n\n*Now* map Republican support by county.\nLet's go straight to the discretized `repub_20_categories` variable, and a good color scale.\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +\n  geom_map(map = county_map) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal()\n```\n\n#### Exercise 10: Play around! {.unnumbered}\n\nConstruct county-level maps of `median_rent` and `median_age`.\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median rent\", colors = c(\"white\", \"lightgreen\", \"darkgreen\"))\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median age\", colors = terrain.colors(10))\n```\n\n\n#### Exercise 11: Choropleth maps with leaflet {.unnumbered}\n\nThough `ggplot()` is often better for this purpose, we can also make choropleth maps with `leaflet()`.\nIf you're curious, check out the `leaflet` documentation:\n\n<https://rstudio.github.io/leaflet/choropleths.html>\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n### Example 1 {.unnumbered}\n\nBoth addresses used between 0 and 450 therms per month.\nThere seem to be two types of months -- those with lower use around 50 therms and those with higher use around 300/400 therms.\n\n```{r}\nggplot(energy, aes(x = therms, fill = address)) + \n  geom_density(alpha = 0.5)\n```\n\n### Example 2 {.unnumbered}\n\nEnergy use is seasonal, with higher usage in winter months.\nIt seems that address a uses slightly more energy.\n\n```{r}\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_point()\nggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_line()\n```\n\n### Example 3 {.unnumbered}\n\nAt both addresses, typical energy use *increased* after renovations.\n\n```{r}\nggplot(energy, aes(y = therms, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n# A density plot isn't very helpful for comparing typical therms in this example!\nggplot(energy, aes(x = therms, fill = renovated)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ address)\n```\n\n### Example 4 {.unnumbered}\n\nlurking variable = outdoor temperature (as reflected by hdd)\n\n```{r}\n# It happened to be colder outside after renovations (higher hdd)\nggplot(energy, aes(y = hdd, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n# When controlling for outside temps (via hdd), energy use decreased post-renovation\nggplot(energy, aes(y = therms, x = hdd, color = renovated)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ address)\n```\n\n### Example 5 {.unnumbered}\n\nBUT this was explained by a *confounding* or *omitted* or *lurking* variable: `hdd` (outdoor temperature)\n\n-   After renovation...\n-   *it happened to be colder*...\n-   which then leads to higher energy use.\n\nThus, *when controlling for* outdoor temps, renovations led to *decreased* energy use.\n\n### Exercise 3: Your turn {.unnumbered}\n\n```{r}\nleaflet(data = starbucks_mn) |> \n  addTiles() |> \n  addMarkers()\n```\n\n### Exercise 3: A simple scatterplot {.unnumbered}\n\nIt would be nice to also have some actual reference maps of countries in the background.\n\n```{r}\nggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n```\n\n### Exercise 6: A state and county-level map {.unnumbered}\n\n#### Part b {.unnumbered}\n\nAdjust the code below to make the plot!\nRemove the `#` to run it.\n\n```{r}\nggplot(midwest_boundaries) +\n  geom_sf() +\n  geom_point(\n    data = starbucks_midwest,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.7,\n    size = 0.2,\n    color = 'darkgreen'\n  ) +\n  theme_map()\n```\n\n### Exercise 7: Contour maps {.unnumbered}\n\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher *density*.\nConsider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\n```{r}\n# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\nNow check out the contour map.\n\n```{r}\n# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n```\n\n### Exercises Part 3: Choropleth maps {.unnumbered}\n\nSpatial data isn't always in the form of point locations!\nFor example, recall the state and county-level data on presidential elections.\n\n```{r}\nelections_by_state <-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n```\n\nIn these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.\nLet's wrangle our data first.\n\nWe'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\n```{r}\n# Don't worry about the code!\n\nelections_by_state <- elections_by_state |> \n  filter(state_abbr != \"DC\") |> \n  select(state_name, state_abbr, repub_pct_20) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties <- elections_by_counties |> \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |> \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties <- elections_by_counties |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n```\n\n### Exercise 8: State-level choropleth maps {.unnumbered}\n\n#### Part d {.unnumbered}\n\n`geom_map()`\n\n### Exercise 10: Play around! {.unnumbered}\n\n```{r}\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median rent\", colors = c(\"white\", \"lightgreen\", \"darkgreen\"))\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median age\", colors = terrain.colors(10))\n```\n\n</details>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["../style/custom.css"],"output-file":"ica-spatial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":{"markdown":{"wrap":"sentence"}},"theme":{"light":"flatly","dark":"darkly"},"code-copy":true,"title":"Spatial Viz"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}