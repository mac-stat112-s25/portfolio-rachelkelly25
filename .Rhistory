#imdb_messy |>
#  ___(___(is.na(actor_1_facebook_likes)))
imdb_messy |>
filter(is.na(actor_1_facebook_likes))
imdb_messy |>
filter(is.na(actor_1_facebook_likes))
imdb_messy |>
filter(is.na(actor_1_facebook_likes))
imdb_messy |>
summarize(mean(duration, na.rm = TRUE))
# imdb_temp <- drop_na(imdb_messy)
imdb_temp <- drop_na(imdb_messy)
nrow(imdb_temp)
# imdb_temp <- drop_na(imdb_messy)
imdb_temp <- drop_na(imdb_messy)
nrow(imdb_temp)
colSums(is.na(imdb_temp))
ggplot(imdb_messy, aes(x = duration, fill = color)) +
geom_density()
# 1
imdb_temp <- imdb_messy |>
select(duration, color) |>
drop_na()
dim(imdb_temp)
# 1
imdb_temp <- imdb_messy |>
select(duration, color) |>
drop_na()
dim(imdb_temp)
# 2
imdb_temp <- imdb_messy |>
filter(!is.na(duration), !is.na(color))
dim(imdb_temp)
# Plot it
ggplot(imdb_temp, aes(x = duration, fill = color)) +
geom_density()
imdb_temp <- imdb_messy |>
mutate(actor_1_facebook_likes =
replace_na(actor_1_facebook_likes, 0))
imdb_temp |>
summarize(sum(is.na(actor_1_facebook_likes)))
library(tidytuesdayR)
library(tidyverse)
library(rnaturalearth)
library(sf)
tuesdata <- tt_load('2020-02-18')
fc <- tuesdata$food_consumption
str(fc)
head(fc, 22)
fc <- select(food_category)
view(fc)
select(food_category)
count(food_category)
count(fc, "food_category")
count(fc, "food_category")
distinct(food_category)
count(fc, "food_category")
distinct("food_category")
tuesdata <- tt_load('2020-02-18')
library(tidytuesdayR)
library(tidyverse)
library(rnaturalearth)
library(sf)
tuesdata <- tt_load('2020-02-18')
fc <- tuesdata$food_consumption
fc_clean <- fc |>
mutate(food_category = fct_recode(food_category,
"Lamb" = "Lamb & Goat",
"Dairy" = "Milk - inc. cheese",
"Wheat" = "Wheat and Wheat Products",
"Nuts" = "Nuts inc. Peanut Butter"))
fc_clean <- fc |>
mutate(food_category = fct_recode(food_category,
"Lamb" = "Lamb & Goat",
"Dairy" = "Milk - inc. cheese",
"Wheat" = "Wheat and Wheat Products",
"Nuts" = "Nuts inc. Peanut Butter"))
unique(fc$food_category)
fc_clean <- fc |>
mutate(food_category = fct_recode(food_category,
"Lamb" = "Lamb & Goat",
"Dairy" = "Milk - inc. cheese",
"Wheat" = "Wheat and Wheat Products",
"Nuts" = "Nuts inc. Peanut Butter"))
unique(fc_clean$food_category)
fc_clean <- fc |>
mutate(food_category = fct_recode(food_category,
"Lamb" = "Lamb & Goat",
"Dairy" = "Milk - inc. cheese",
"Wheat" = "Wheat and Wheat Products",
"Nuts" = "Nuts inc. Peanut Butter"))
view(fc_clean$food_category)
fcc <- fc |>
mutate(food_category = fct_recode(food_category,
"Lamb" = "Lamb & Goat",
"Dairy" = "Milk - inc. cheese",
"Wheat" = "Wheat and Wheat Products",
"Nuts" = "Nuts inc. Peanut Butter"))
view(fcc$food_category)
top_countries <- fc |>
group_by(country) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE)) |>
arrange(desc(total_consumption)) |>
slice_head(n = 5)
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
coord_flip() +  # Flip to make it more readable
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
top_countries <- fcc |>
group_by(country) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE)) |>
arrange(desc(total_consumption)) |>
slice_head(n = 5)
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
coord_flip() +  # Flip to make it more readable
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal()
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +  # Use "identity" to plot exact values
coord_flip() +  # Flip for better readability
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_col() +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal()
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +  # Use "identity" to plot exact values
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal()
#Plot it, bar graph stylzzz
ggplot(top_countries, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +
labs(
title = "Top 5 Countries by Total Food Consumption",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal()
# Clean the data - Find top 5 consuming countries for each food category
top_countries_per_food <- fc |>
group_by(food_category, country) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop") |>
arrange(food_category, desc(total_consumption)) |>
group_by(food_category) |>
slice_head(n = 5)
#Plot it
ggplot(top_countries_per_food, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip for better readability
facet_wrap(~ food_category, scales = "free_y") +  # One facet per food category
labs(
title = "Top 5 Countries by Food Consumption per Category",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal() +
theme(legend.position = "none")
#Plot it
ggplot(top_countries_per_food, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +
facet_wrap(~ food_category, scales = "free_y") +  # One facet per food category
labs(
title = "Top 5 Countries by Food Consumption per Category",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country"
) +
theme_minimal() +
theme(legend.position = "none")
#Plot it
ggplot(top_countries_per_food, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +  #Hard to see countries the other way
facet_wrap(~ food_category, scales = "free_y") +
labs(
title = "Top 5 Countries by Food Consumption per Category",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal() +
theme(legend.position = "none")
# Clean the data - Find top 5 consuming countries for each food category
top_countries_per_food <- fcc |>
group_by(food_category, country) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop") |>
arrange(food_category, desc(total_consumption)) |>
group_by(food_category) |>
slice_head(n = 5)
#Plot it
ggplot(top_countries_per_food, aes(x = reorder(country, total_consumption), y = total_consumption, fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +  #Hard to see countries the other way
facet_wrap(~ food_category, scales = "free_y") +
labs(
title = "Top 5 Countries by Food Consumption per Category",
x = "Country",
y = "Total Food Consumption (kg per capita)",
fill = "Country") +
theme_minimal() +
theme(legend.position = "none")
food_map_data <- fcc|>
group_by(country, food_category) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# Plot a choropleth - load map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join food consumption data with world map data
map_data <- world |>
left_join(food_map_data, by = c("name" = "country"))
# Plot choropleth map
ggplot(map_data) +
geom_sf(aes(fill = total_consumption), color = "gray40") +
scale_fill_viridis_c(option = "magma", na.value = "white") +
facet_wrap(~ food_category) +
labs(
title = "Food Consumption by Country",
fill = "Total Consumption (kg per capita)") +
theme_minimal()
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load(2025, week = 8)
view(tuesdata)
view tuesdata
tuesdata <- tidytuesdayR::tt_load(2025, week = 8)
view(tuesdata)
View(tuesdata)
import kagglehub
import(kagglehub)
library(tidytuesdayR)
library(tidycensus)
library(tidytuesdayR)
install(tidycensus)
library(tidytuesdayR)
install.packages(tidycensus)
library(tidytuesdayR)
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(sf)
library(ggplot2)
# Set up Census API Key (Only needs to be done once)
# You can get a free key at https://api.census.gov/data/key_signup.html
census_api_key("YOUR_CENSUS_API_KEY", install = TRUE)
# Load ACS median household income data for Colorado counties (5-year estimate)
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",  # Median Household Income
year = 2022,  # Most recent available
survey = "acs5",
geometry = TRUE  # Get county boundaries for mapping
)
# Plot choropleth map
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "gray90") +
labs(
title = "Median Household Income by County in Colorado (2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau ACS 5-Year Estimates"
) +
theme_minimal()
# Load ACS median household income data for Colorado counties (5-year estimate)
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",  # Median Household Income
year = 2022,  # Most recent available
survey = "acs5",
geometry = TRUE)  # Get county boundaries for mapping
head(co_income)
View(co_income)
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",  # Median Household Income
year = 2022,  # Most recent available
survey = "acs5",
geometry = TRUE)  # Get county boundaries for mapping
head(co_income)
# Plot choropleth map
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "gray90") +
labs(
title = "Median Household Income by County in Colorado (2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau ACS 5-Year Estimates") +
theme_minimal()
View(co_income)
co_income <- get_acs(
geography = "county",
state = "CO",
year = 2022,
survey = "acs5",
geometry = TRUE)
decennial_2010_vars <- load_variables(
year = 2010,
"pl",
cache = TRUE
)# 2016 - 2020 5 Year American Community Survey (ACS) Variables
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE
)
View(acs_20_vars)
View(decennial_2010_vars)
decennial_2010_vars <- load_variables(
year = 2020,
"pl",
cache = TRUE
)# 2016 - 2020 5 Year American Community Survey (ACS) Variables
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE
)
decennial_2020_vars <- load_variables(
year = 2020,
"pl",
cache = TRUE)
# 2016 - 2020 5 Year American Community Survey (ACS) Variables
acs_20_vars = load_variables(
year = 2020,
"acs5",
cache = TRUE)
View(acs_20_vars)
View(decennial_2020_vars)
census_data = get_decennial(
geography = "county",
state = "NM",
variables = vars_reth,
summary_var = "P2_001N",
year = 2020,
sumfile = "pl"
)
desired_vars = c(
all = "P2_001N",
hisp = "P2_002N",
white = "P2_005N",
baa = "P2_006N",
amin = "P2_007N",
asian = "P2_008N",
nhopi = "P2_009N",
other = "P2_010N",
multi = "P2_011N"
)
census_data = get_decennial(
geography = "county",
state = "NM",
variables = desired_vars,
summary_var = "P2_001N",
year = 2020,
sumfile = "pl"
)
View(census_data)
ggplot(census_data) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "gray90") +
labs(
title = "Median Household Income by County in Colorado (2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau ACS 5-Year Estimates") +
theme_minimal()
# Plot choropleth map
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "gray90") +
labs(
title = "Median Household Income by County in Colorado (2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau ACS 5-Year Estimates") +
theme_minimal()
library(tidytuesdayR)
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(sf)
library(ggplot2)
#This is how I got Census data for CO
census_api_key("YOUR_CENSUS_API_KEY", install = TRUE)
install.packages("tidycensus")
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
survey = "acs5",
geometry = TRUE)
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
survey = "acs5",
geometry = TRUE)
library(tidycensus)
library(tidyverse)
library(sf)
library(ggplot2)
library(tidytuesdayR)
install.packages("tidycensus")
install.packages("tidycensus")
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
survey = "acs5",
geometry = TRUE)
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
survey = "acs5",
geometry = TRUE)
# Load additional package
library(tigris)
# Get the income data without geometry
co_income_data <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
geometry = FALSE
)
# Get the county geometry separately
co_geometry <- counties(state = "CO", cb = TRUE, year = 2022, class = "sf")
