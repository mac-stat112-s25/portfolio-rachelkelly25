geom_line()
ggplot(education, aes(x = sat)) +
geom_density(fill = "pink")
# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
head(hikes)
# Use the ggplot function
# Load the package
library(tidyverse)
# Use the ggplot function
ggplot(hikes, aes(x = rating))
#| eval: true
#| message: false
# Load the package
library(tidyverse)
ggplot(hikes, aes(x = rating))
# This made it a bar plot.
ggplot(hikes, aes(x = rating)) +
geom_bar()
# Makes access labels.
ggplot(hikes, aes(x = rating)) +
geom_bar() +
labs(x = "Rating", y = "Number of hikes")
# This function filles the bars with blue or a corresponding color.
ggplot(hikes, aes(x = rating)) +
geom_bar(fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Outlines it in orange.
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Changed the theme. Changed the background color
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue")  +
labs(x = "Rating", y = "Number of hikes") +
theme_minimal()
ggplot(hikes, aes(x = elevation)) + geom_histogram()
ggplot(hikes, aes(x = elevation)) +geom_histogram()
# Made a histogram
ggplot(hikes, aes(x = elevation)) +
geom_histogram()
# Added white outlines of each column
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white")
# Filled with blue
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", fill = "blue")
# Changed the x and y axis labels
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white") +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Changed the ranges of the columns or the bin width
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 1000) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Made the bin width way smaller
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 5) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Changed the bin width again to make it more reasonable
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
ggplot(hikes, aes(x = elevation)) +
geom_density()
ggplot(hikes, aes(x = elevation)) +
geom_density(color = "blue", fill = "orange")
# YUCK
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# YUCK HARD TO READ
ggplot(hikes, aes(x = elevation)) + geom_histogram(color = "white", binwidth = 200) + labs(x = "Elevation (feet)", y = "Number of hikes")
# Data on students in this class
survey <- read.csv("https://hash-mac.github.io/stat112site-s25/data/survey.csv")
ggplot(survey, aes(x=hangout))+geom_bar(color = "pink", fill = "purple")
# World Cup data
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
#| eval: true
ggplot(hikes, aes(x = rating))
#| eval: true
# Add a bar plot LAYER
ggplot(hikes, aes(x = rating)) +
geom_bar()
# Add meaningful axis labels
ggplot(hikes, aes(x = rating)) +
geom_bar() +
labs(x = "Rating", y = "Number of hikes")
# FILL the bars with blue
ggplot(hikes, aes(x = rating)) +
geom_bar(fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# COLOR the outline of the bars in orange
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Change the theme to a white background
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue")  +
labs(x = "Rating", y = "Number of hikes") +
theme_minimal()
#| eval: true
ggplot(hikes, aes(x = elevation)) +
geom_bar()
#| eval: true
# Add a histogram layer
ggplot(hikes, aes(x = elevation)) +
geom_histogram()
# Outline the bars in white
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white")
# Fill the bars in blue
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", fill = "blue")
# Add axis labels
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white") +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 1000 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 1000) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 5 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 5) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 200 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
#| eval: true
ggplot(hikes, aes(x = elevation)) +
geom_density(color = "blue", fill = "orange")
?lua
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
# Load tidyverse package for plotting and wrangling
library(tidyverse)
# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |>
mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |>
filter(address != "c")
# Check it out
head(energy)
ggplot(energy, aes(x = therms, fill = address)) +
geom_density(alpha = 0.5)
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_point()
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_line()
ggplot(energy, aes(y = therms, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
ggplot(energy, aes(x = therms, fill = renovated)) +
geom_density(alpha = 0.5) +
facet_wrap(~ address)
ggplot(energy, aes(y = hdd, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
ggplot(energy, aes(y = therms, x = hdd, color = renovated)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ address)
fave_places <- read.csv("https://ajohns24.github.io/data/112/our_fave_places.csv")
# Check it out
head(fave_places)
View(fave_places)
# Load the leaflet package
library(leaflet)
# Just a plotting frame
leaflet(data = fave_places)
# Now what do we have?
leaflet(data = fave_places) |>
addTiles()
# Now what do we have?
# longitude and latitude refer to the variables in our data
leaflet(data = fave_places) |>
addTiles() |>
addMarkers(lng = ~longitude, lat = ~latitude)
# Since we named them "longitude" and "latitude", the function
# automatically recognizes these variables. No need to write them!
leaflet(data = fave_places) |>
addTiles() |>
addMarkers()
# Load package needed to change color
library(gplots)
# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |>
addTiles() |>
addCircles(color = col2hex("red"))
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
addProviderTiles("USGS") |>
addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
addPolylines(
lng = ~longitude,
lat = ~latitude,
color = col2hex("green")
)
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
# Don't worry about the syntax
starbucks_mn <- starbucks |>
filter(Country == "US", State.Province == "MN")
leaflet(data = starbucks) |>
addTiles() |>
addMarkers(lng = ~longitude, lat = ~latitude)
leaflet(data = starbucks) |>
addTiles() |>
addMarkers()
# Don't worry about the syntax
starbucks_mn <- starbucks |>
filter(Country == "US", State.Province == "MN")
# Load package needed to change color
library(gplots)
# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |>
addTiles() |>
addCircles(color = col2hex("red"))
# Load tidyverse package for plotting and wrangling
library(tidyverse)
# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |>
mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |>
filter(address != "c")
# Check it out
head(energy)
fave_places <- read.csv("https://ajohns24.github.io/data/112/our_fave_places.csv")
# Check it out
head(fave_places)
# Load the leaflet package
library(leaflet)
# Just a plotting frame
leaflet(data = fave_places)
# Load package needed to change color
library(gplots)
# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |>
addTiles() |>
addCircles(color = col2hex("red"))
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
addProviderTiles("USGS") |>
addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
addPolylines(
lng = ~longitude,
lat = ~latitude,
color = col2hex("green")
)
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
# Don't worry about the syntax
starbucks_mn <- starbucks |>
filter(Country == "US", State.Province == "MN")
# Don't worry about the syntax
starbucks_mn <- starbucks |>
filter(Country == "US", State.Province == "MN")
leaflet(data = starbucks_mn) |>
addTiles() |>
addMarkers()
ggplot(starbucks, aes(y = Latitude, x = Longitude)) +
geom_point(size = 0.5)
# Load the package
library(rnaturalearth)
# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) +
geom_sf()
# Load package needed to change map theme
library(mosaic)
# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# How does this change how we use geom_point?!
ggplot(world_boundaries) +
geom_sf() +
geom_point(
data = starbucks,
aes(x = Longitude, y = Latitude),
alpha = 0.3, size = 0.2, color = "darkgreen"
) +
theme_map()
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |>
filter(Country %in% c('CA', 'MX', 'US'))
cma_boundaries <- ne_states(
country = c("canada", "mexico", "united states of america"),
returnclass = "sf")
# Just the boundaries
ggplot(cma_boundaries) +
geom_sf()
# Add the points
# And zoom in
ggplot(cma_boundaries) +
geom_sf() +
geom_point(
data = starbucks_cma,
aes(x = Longitude, y = Latitude),
alpha = 0.3,
size = 0.2,
color = "darkgreen"
) +
coord_sf(xlim = c(-179.14, -50)) +
theme_map()
starbucks_midwest <- starbucks |>
filter(State.Province %in% c("MN", "ND", "SD", "WI"))
# Load packages
library(sf)
library(maps)
# Get the boundaries
midwest_boundaries <- st_as_sf(
maps::map("county",
region = c("minnesota", "wisconsin", "north dakota", "south dakota"),
fill = TRUE, plot = FALSE))
# Check it out
head(midwest_boundaries)
ggplot(midwest_boundaries) +
geom_sf() +
geom_point(
data = starbucks_midwest,
aes(x = Longitude, y = Latitude),
alpha = 0.7,
size = 0.2,
color = 'darkgreen'
) +
theme_map()
# What changed in the plot?
# What changed in our code?!
ggplot(cma_boundaries) +
geom_sf() +
geom_density_2d(
data = starbucks_cma,
aes(x = Longitude, y = Latitude),
size = 0.2,
color = "darkgreen"
) +
coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
theme_map()
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
# Don't worry about the code!
elections_by_state <- elections_by_state |>
filter(state_abbr != "DC") |>
select(state_name, state_abbr, repub_pct_20) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(30, 70, by = 5),
labels = c("30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-70"),
include.lowest = TRUE))
elections_by_counties <- elections_by_counties |>
select(state_name, state_abbr, county_name, county_fips,
repub_pct_20, median_age, median_rent) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(0, 100, by = 10),
labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80-89", "90-100"),
include.lowest = TRUE))
# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")
# Check it out
head(states_map)
head(states_map)
head(elections_by_state)
# Note where the dataset, elections_by_state, is used
# Note where the background map, states_map, is used
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map()
# Make it nicer!
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_gradientn(name = "% Republican", colors = c("blue", "purple", "red"), values = scales::rescale(seq(0, 100, by = 5)))
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map()
# Load package needed for refining color palette
library(RColorBrewer)
# Now fix the colors
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
# Get only the starbucks data from the US
starbucks_us <- starbucks |>
filter(Country == "US")
# Map it
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
geom_point(
data = starbucks_us,
aes(x = Longitude, y = Latitude),
size = 0.05,
alpha = 0.2,
inherit.aes = FALSE
) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map)
# Check it out
head(county_map)
head(county_map)
head(elections_by_counties)
# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |>
mutate(county_fips = as.character(county_fips)) |>
mutate(county_fips =
ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
geom_map(map = county_map) +
scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal()
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median rent", colors = c("white", "lightgreen", "darkgreen"))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median rent", colors = c("white", "lightgreen", "darkgreen"))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median age", colors = terrain.colors(10))
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
# Load tidyverse package for plotting and wrangling
library(tidyverse)
# Import the data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
library(tidyverse)
# Load tidyverse package for plotting and wrangling
library(tidyverse)
# Import the data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point()
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point() +
labs(x = "A", y = "B", title = "C", color = "D")
View(weather)
fig-cap: "Figure of 3 Australian Cities and their Weather"
#| fig-cap: "Morning and Afternoon Temps in 3 Australian Cities"
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point() +
labs(x = "Temp at 9am", y = "Temp at 3pm", color = "Location")
#| fig-cap: "Morning and Afternoon Temps in 3 Australian Cities"
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point() +
labs(x = "Temp at 9am", y = "Temp at 3pm", color = "Location")
?fig-cap
#| fig-cap: "Density plots of 3pm temperatures in 3 Australian locations."
#| fig-alt: "???"
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.5) +
labs(x = "3pm temperature (Celsius)")
#| fig-cap: "Density plots of 3pm temperatures in 3 Australian locations."
#| fig-alt: "The figure shows temperatures at 3pm in 3 Australian cities. Uluru is the warmest place, Wollongong is the most consistent and Hobart is the coolest place. Source: https://mac-stat.github.io/data/weather_3_locations.csv"
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.5) +
labs(x = "3pm temperature (Celsius)")
#| fig-cap: "Density plots of 3pm temperatures in 3 Australian locations."
#| fig-alt: "???"
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.5) +
labs(x = "3pm temperature (Celsius)")
#| fig-cap: "Density plots of 3pm temperatures in 3 Australian locations."
#| fig-alt: "The figure shows temperatures at 3pm in 3 Australian cities. Uluru is the warmest place, Wollongong is the most consistent and Hobart is the coolest place. Source: https://mac-stat.github.io/data/weather_3_locations.csv"
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.5) +
labs(x = "3pm temperature (Celsius)")
