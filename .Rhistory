mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |>
head()
# What did this code do?
elections_small |>
mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
head()
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |>
mutate(dem_support = dem_pct_20-dem_pct_16) |>
head()
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |>
mutate(dem_support = dem_pct_16-dem_pct_20) |>
head()
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |>
mutate(dem_support = dem_pct_20-dem_pct_16) |>
head()
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
elections_small |>
mutate(dem_win = dem_pct_20 > dem_pct_16) |>
head()
elections_small |>
filter(state_name == "Wisconsin",
repub_pct_20 < dem_pct_20) |>
arrange(desc(total_votes_20)) |>
head()
# Now try it. Change the order of filter and arrange below.
elections_small |>
filter(state_name == "Wisconsin",
repub_pct_20 < dem_pct_20) |>
arrange(desc(total_votes_20)) |>
head()
elections_small |>
filter(state_name == "Delaware") |>
mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
# Now try it. Change the order of mutate and select below.
elections_small |>
filter(state_name == "Delaware") |>
mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
elections_small |>
filter(state_name == "Minnesota") |>
select(county_name, dem_pct_20) |>
arrange(desc(dem_pct_20))
# Define the dataset
# Only store the results once you're confident that they're correct
mn_wi <- elections_small |>
filter(state_name %in% c("Minnesota", "Wisconsin")) |>
select(state_name, county_name, dem_pct_20, dem_pct_16) |>
mutate(dem_change = dem_pct_20 - dem_pct_16) |>
arrange(dem_change)
# Check the data
head(mn_wi)
# Check out the first 6 rows to confirm your results
ggplot(mn_wi, aes(x = dem_change, fill = state_name)) +
geom_density(alpha = 0.5)
# What does this do?
elections_small |>
summarize(median(repub_pct_20))
# What does this do?
elections_small |>
summarize(median_repub = median(repub_pct_20))
# What does this do?
elections_small |>
summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
elections_small |>
group_by(state_name)
# Check out the structure before and after group_by
elections_small |>
class()
#
elections_small |>
group_by(state_name) |>
class()
# Check out the structure before and after group_by
elections_small |>
class()
#
elections_small |>
group_by(state_name) |>
class()
View(elections_small)
View(mn)
# What does this do?
# (What if we didn't use group_by?)
elections_small |>
group_by(state_name) |>
summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
# Sort the *states* from the most to least total votes cast in 2020
elections_small |>
group_by(state_name) |>
summarize(total = sum(total_votes_20)) |>
arrange(desc(total))
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
elections_small |>
mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100),
repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |>
group_by(state_name) |>
summarize(dem_total = sum(dem_votes_20),
repub_total = sum(repub_votes_20))
# What states did the Democratic candidate win in 2020?
elections_small |>
mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100),
repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |>
group_by(state_name) |>
summarize(dem_total = sum(dem_votes_20),
repub_total = sum(repub_votes_20)) |>
filter(dem_total > repub_total)
# What states did the Democratic candidate win in 2020?
elections_small |>
mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100),
repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |>
group_by(state_name) |>
summarize(dem_total = sum(dem_votes_20),
repub_total = sum(repub_votes_20)) |>
filter(dem_total > repub_total)
# What states did the Democratic candidate win in 2020?
elections_small |>
mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100),
repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |>
group_by(state_name) |>
summarize(dem_total = sum(dem_votes_20),
repub_total = sum(repub_votes_20)) |>
filter(dem_total > repub_total)
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
# In what years did Brazil win the World Cup?
world_cup |>
filter(winner == "Brazil")
# What were the 6 World Cups with the highest attendance?
world_cup |>
arrange(desc(attendance)) |>
head()
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored)) +
geom_histogram(color = "white")
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup |>
summarize(min(goals_scored), median(goals_scored), max(goals_scored))
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
ggplot(world_cup, aes(x = year, y = goals_scored)) +
geom_point() +
geom_line()
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
head(penguins)
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')
# Check it out
head(penguins)
# Get data on only Adelie penguins that weigh more than 4700g
# Get data on penguin body mass only
# Show just the first 6 rows
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
# Calculate the average body mass by species
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
ggplot(penguins, aes(x = species))
penguins |>
count(species)
# Sort Gentoo penguins from biggest to smallest with respect to their
# bill length in cm (there are 10 mm in a cm)
# Sort the species from smallest to biggest with respect to their
# average bill length in cm
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
head(penguins)
# NOTE the use of is.na()
penguins |>
summarize(sum(is.na(body_mass_g)))
# NOTE the use of is.na()
penguins_w_body_mass <- penguins |>
filter(!is.na(body_mass_g))
# Compare the number of penguins in this vs the original data
nrow(penguins_w_body_mass)
nrow(penguins)
penguins_w_body_mass |>
summarize(sum(is.na(sex)))
penguins_complete <- penguins |>
na.omit()
nrow(penguins_complete)
nrow(penguins)
# First: recall the variable names
names(penguins)
# Use a shortcut to keep everything but the year and island variables
# Use a shortcut to keep only species and the penguin characteristics measured in mm
# Use a shortcut to keep only species and bill-related measurements
# Use a shortcut to keep only species and the length-related characteristics
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |>
arrange(species)
# Change this code to count the number of male/female penguins observed for each species
penguins |>
count(species)
# Change this code to calculate the average body mass by species and sex
penguins |>
group_by(species) |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Get today's date
as.Date(today())
# Let's store this as "today" so we can work with it below
today <- as.Date(today())
# Check out the class of this object
class(today)
year(today)
# What do these lines produce / what's their difference?
month(today)
month(today, label = TRUE)
# What does this number mean?
week(today)
# What do these lines produce / what's their difference?
mday(today)
yday(today)  # This is often called the "Julian day"
# What do these lines produce / what's their difference?
wday(today)
wday(today, label = TRUE)
# What do the results of these 2 lines tell us?
today >= ymd("2024-02-14")
today < ymd("2024-02-14")
library(mosaic)
data("Birthdays")
head(Birthdays)
# How many days of data do we have for each state?
# How many total births were there in this time period?
# How many total births were there per state in this time period, sorted from low to high?
penguins |>
filter(species != "Gentoo") |>
ggplot(aes(y = bill_length_mm, x = bill_depth_mm, color = species)) +
geom_point()
ggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, color = species)) +
geom_point() +
facet_wrap(~ sex)
# Get data on only Adelie penguins that weigh more than 4700g
penguins |>
filter(species == "Adelie", body_mass_g > 4700)
# Get data on penguin body mass only
# Show just the first 6 rows
penguins |>
select(body_mass_g) |>
head()
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |>
arrange(body_mass_g) |>
head()
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Calculate the average body mass by species
penguins |>
group_by(species) |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |>
mutate(body_mass_kg = body_mass_g/1000) |>
head()
ggplot(penguins, aes(x = species)) +
geom_bar()
penguins |>
group_by(species) |>
summarize(n())
penguins |>
count(species)
# Sort Gentoo penguins from biggest to smallest with respect to their
# bill length in cm (there are 10 mm in a cm)
penguins |>
filter(species == "Gentoo") |>
mutate(bill_length_cm = bill_length_mm / 10) |>
arrange(desc(bill_length_cm))
# Sort the species from smallest to biggest with respect to their
# average bill length in cm
penguins |>
mutate(bill_length_cm = bill_length_mm / 10) |>
group_by(species) |>
summarize(mean_bill_length = mean(bill_length_cm, na.rm = TRUE)) |>
arrange(desc(mean_bill_length))
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |>
filter(species %in% c("Adelie", "Chinstrap")) |>
count(species)
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |>
filter(species != "Gentoo") |>
count(species)
# First: recall the variable names
names(penguins)
# Use a shortcut to keep everything but the year and island variables
penguins |>
select(-year, -island)
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |>
select(species, ends_with("mm"))
# Use a shortcut to keep only species and bill-related measurements
penguins |>
select(species, starts_with("bill"))
# Use a shortcut to keep only species and the length-related characteristics
penguins |>
select(species, contains("length"))
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |>
arrange(species, island) |>
head()
# Change this code to count the number of male/female penguins observed for each species
penguins |>
count(species, sex)
# Change this code to calculate the average body mass by species and sex
penguins |>
group_by(species, sex) |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Get today's date
as.Date(today())
# Let's store this as "today" so we can work with it below
today <- as.Date(today())
# Check out the class of this object
class(today)
# Records just the 4-digit year
year(today)
# Today's month, as a number or label
month(today)
month(today, label = TRUE)
# This is the week of the year (1-52)
week(today)
# Day of the month (1-31) and day of the year (1-366)
mday(today)
yday(today)  # This is often called the "Julian day"
# Day of the week as a number or label
wday(today)
wday(today, label = TRUE)
# today is on or after Feb 14, 2024
today >= ymd("2024-02-14")
# today is not before Feb 14, 2024
today < ymd("2024-02-14")
ggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, color = species)) +
geom_point() +
facet_wrap(~ sex)
# Get data on only Adelie penguins that weigh more than 4700g
penguins |>
filter(species == "Adelie", body_mass_g > 4700)
# Get data on penguin body mass only
# Show just the first 6 rows
penguins |>
select(body_mass_g) |>
head()
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |>
arrange(body_mass_g) |>
head()
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Calculate the average body mass by species
penguins |>
group_by(species) |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |>
mutate(body_mass_kg = body_mass_g/1000) |>
head()
ggplot(penguins, aes(x = species))
ggplot(penguins, aes(x = species)) +
geom_bar()
penguins |>
group_by(species) |>
summarize(n())
penguins |>
count(species)
penguins |>
count(species)
# Sort Gentoo penguins from biggest to smallest with respect to their
# bill length in cm (there are 10 mm in a cm)
penguins |>
filter(species == "Gentoo") |>
mutate(bill_length_cm = bill_length_mm / 10) |>
arrange(desc(bill_length_cm))
# Sort the species from smallest to biggest with respect to their
# average bill length in cm
penguins |>
mutate(bill_length_cm = bill_length_mm / 10) |>
group_by(species) |>
summarize(mean_bill_length = mean(bill_length_cm, na.rm = TRUE)) |>
arrange(desc(mean_bill_length))
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
penguins |>
filter(species %in% c("Adelie", "Chinstrap")) |>
count(species)
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
# ___ |>
#   filter(___) |>
#   count(species)
penguins |>
filter(species != "Gentoo") |>
count(species)
head(penguins)
# NOTE the use of is.na()
penguins_w_body_mass <- penguins |>
filter(!is.na(body_mass_g))
# Compare the number of penguins in this vs the original data
nrow(penguins_w_body_mass)
nrow(penguins)
penguins_complete <- penguins |>
na.omit()
nrow(penguins_complete)
nrow(penguins)
# Use a shortcut to keep everything but the year and island variables
penguins |>
select(-year, -island)
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |>
select(species, ends_with("mm"))
# Use a shortcut to keep only species and bill-related measurements
penguins |>
select(species, starts_with("bill"))
# Use a shortcut to keep only species and the length-related characteristics
penguins |>
select(species, contains("length"))
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |>
arrange(species, island) |>
head()
# Change this code to count the number of male/female penguins observed for each species
penguins |>
count(species, sex)
# Change this code to calculate the average body mass by species and sex
penguins |>
group_by(species, sex) |>
summarize(mean = mean(body_mass_g, na.rm = TRUE))
year(today)
# What do these lines produce / what's their difference?
month(today)
month(today, label = TRUE)
# What does this number mean?
week(today)
library(mosaic)
data("Birthdays")
head(Birthdays)
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')
# Using count()
penguins |>
count(species, sex)
# Using group_by() and summarize()
penguins |>
group_by(species, sex) |>
summarize(n())
penguins |>
group_by(species, sex) |>
summarize(n = n()) |>
mutate(proportion = n / sum(n))
penguins |>
group_by(species, sex) |>
summarize(n = n()) |>
mutate(proportion = n / sum(n))
# Changing the order calculates the proportion of species within each sex
penguins |>
group_by(sex, species) |>
summarize(n = n()) |>
mutate(proportion = n / sum(n))
penguin_avg <- penguins |>
group_by(species, sex) |>
summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |>
na.omit()
penguin_avg <- penguins |>
group_by(species, sex) |>
summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |>
na.omit()
