library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
rename(country = name)  # Ensure the column name matches fc_summary
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
rename(country = name)  # Ensure the column name matches fc_summary
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearth)
# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# Merge with world map to get geometry
fc_map_data <- world %>%
left_join(fc_summary, by = "country")
View(fc_summary)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(fill = total_consumption, geometry = geometry), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
View(tuesdata)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(fill = total_consumption), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- world %>%
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- world %>%
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
# World map visualization with facets for each food category
ggplot(fc_map_data) +
geom_sf(aes(fill = total_consumption), color = "white") +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
courses_old <- read.csv("https://mac-stat.github.io/data/courses.csv")
# Check out the data
head(courses_old)
# Check out the structure of each variable
# Many of these are characters!
str(courses_old)
library(tidyverse)
classes <- data.frame(
sem        = c("SP2023", "FA2023", "SP2024"),
area       = c("History", "Math", "Anthro"),
enroll     = c("30 - people", "20 - people", "25 - people"),
instructor = c("Ernesto Capello", "Lori Ziegelmeier", "Arjun Guneratne")
)
classes
# Define a new variable "num" that adds up the number of characters in the area label
# Change the areas to "history", "math", "anthro" instead of "History", "Math", "Anthro"
# Create a variable that id's which courses were taught in spring
# Change the semester labels to "fall2023", "spring2024", "spring2023"
# In the enroll variable, change all e's to 3's (just because?)
# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
# How can we do this after mutating?
classes |>
mutate(spring = str_detect(sem, "SP"))
# We don't have to mutate first!
classes |>
filter(str_detect(sem, "SP"))
# Yet another way
classes |>
filter(!str_detect(sem, "FA"))
classes |>
separate(instructor, c("first", "last"), sep = " ")
# Sometimes the function can "intuit" how we want to separate the variable
classes |>
separate(instructor, c("first", "last"))
# classes |>
#   separate(___, c(___, ___), sep = "___")
# (?<=[SP|FA]): any character *before* the split point is a "SP" or "FA"
# (?=2): the first character *after* the split point is a 2
classes |>
separate(sem,
c("semester", "year"),
"(?<=[SP|FA])(?=2)")
# More general:
# (?<=[a-zA-Z]): any character *before* the split point is a lower or upper case letter
# (?=[0-9]): the first character *after* the split point is number
classes |>
separate(sem,
c("semester", "year"),
"(?<=[A-Z])(?=[0-9])")
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")
# Check it out
head(courses)
# Construct a table that indicates the number of classes offered in each day/time slot
# Print only the 6 most popular time slots
# Identify the 6 departments that offered the most sections
# Identify the 6 departments with the longest average course titles
# enrollments |>
#   filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
# enrollments_2 <- enrollments |>
#   distinct(days, time, instructor, .keep_all = TRUE)
# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
# enrollments_2 |>
#   filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
# Make a bar plot showing the number of night courses by day of the week
# Use courses_clean
# Define some strings to play around with
example <- "The quick brown fox jumps over the lazy dog."
str_replace(example, "quick", "really quick")
str_replace_all(example, "(fox|dog)", "****") # | reads as OR
str_replace_all(example, "(fox|dog).", "****") # "." for any character
str_replace_all(example, "(fox|dog)\\.$", "****") # at end of sentence only, "\\." only for a period
str_replace_all(example, "the", "a") # case-sensitive only matches one
str_replace_all(example, "[Tt]he", "a") # # will match either t or T; could also make "a" conditional on capitalization of t
str_replace_all(example, "[Tt]he", "a") # first match only
# More examples
example2 <- "Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could"
example3 <- "This is a test"
# Store the examples in 1 place
examples <- c(example, example2, example3)
pat <- "[^aeiouAEIOU ]{3}" # Regular expression for three straight consonants. Note that I've excluded spaces as well
str_detect(examples, pat) # TRUE/FALSE if it detects pattern
str_subset(examples, pat) # Pulls out those that detects pattern
pat2 <- "[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}" # consonant followed by two vowels followed by a consonant
str_extract(example2, pat2) # extract first match
str_extract_all(example2, pat2, simplify = TRUE) # extract all matches
# Define a new variable "num" that adds up the number of characters in the area label
classes |>
mutate(num = str_length(area))
# Change the areas to "history", "math", "anthro"
classes |>
mutate(area = str_to_lower(area))
# Create a variable that id's which courses were taught in spring
classes |>
mutate(spring = str_detect(sem, "SP"))
# Change the semester labels to "fall2023", "spring2024", "spring2023"
classes |>
mutate(sem = str_replace(sem, "SP", "spring")) |>
mutate(sem = str_replace(sem, "FA", "fall"))
# In the enroll variable, change all e's to 3's (just because?)
classes |>
mutate(enroll = str_replace_all(enroll, "e", "3"))
# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
classes |>
mutate(semester = str_sub(sem, 1, 2),
year = str_sub(sem, 3, 6))
# How can we do this after mutating?
classes |>
mutate(spring = str_detect(sem, "SP")) |>
filter(spring == TRUE)
# Construct a table that indicates the number of classes offered in each day/time slot
# Print only the 6 most popular time slots
courses |>
count(days, time) |>
arrange(desc(n)) |>
head()
courses_clean <- courses |>
separate(avail_max, c("avail", "max"), sep = " / ") |>
mutate(enroll = as.numeric(max) - as.numeric(avail)) |>
separate(number, c("dept", "number", "section"))
head(courses_clean)
# Identify the 6 departments that offered the most sections
courses_clean |>
count(dept) |>
arrange(desc(n)) |>
head()
# Identify the 6 departments with the longest average course titles
courses_clean |>
mutate(length = str_length(name)) |>
group_by(dept) |>
summarize(avg_length = mean(length)) |>
arrange(desc(avg_length)) |>
head()
courses_clean |>
filter(str_detect(instructor, "Alicia Johnson"))
stat <- courses_clean |>
filter(dept == "STAT") |>
mutate(name = str_replace(name, "Introduction to ", "")) |>
mutate(name = str_replace(name, "Statistical", "Stat")) |>
mutate(start_time = str_sub(time, 1, 5)) |>
select(number, name, start_time, enroll)
stat
dim(stat)
enrollments <- courses_clean |>
filter(dept != "PE", dept != "INTD") |>
filter(!(dept == "MUSI" & as.numeric(number) < 100)) |>
filter(!(dept == "THDA" & as.numeric(number) < 100)) |>
filter(!str_detect(section, "L"))
head(enrollments)
# Make a bar plot showing the number of night courses by day of the week.
courses_clean |>
filter(str_detect(time, "7:00")) |>
ggplot(aes(x = days)) +
geom_bar()
# Define a new variable "num" that adds up the number of characters in the area label
classes |>
mutate(num = str_length(area))
# Change the areas to "history", "math", "anthro" instead of "History", "Math", "Anthro"
classes |>
mutate(area = str_to_lower(area))
# Change the semester labels to "fall2023", "spring2024", "spring2023"
classes |>
mutate(sem = str_replace(sem, "SP", "spring")) |>
mutate(sem = str_replace(sem, "FA", "fall"))
# In the enroll variable, change all e's to 3's (just because?)
classes |>
mutate(enroll = str_replace_all(enroll, "e", "3"))
# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
classes |>
mutate(semester = str_sub(sem, 1, 2),
year = str_sub(sem, 3, 6))
# How can we do this after mutating?
classes |>
mutate(spring = str_detect(sem, "SP"))
classes |>
mutate(spring = str_detect(sem, "SP")) |>
filter(spring == TRUE)
# We don't have to mutate first!
classes |>
filter(str_detect(sem, "SP"))
# Yet another way
classes |>
filter(!str_detect(sem, "FA"))
classes |>
separate(instructor, c("first", "last"), sep = " ")
# Sometimes the function can "intuit" how we want to separate the variable
classes |>
separate(instructor, c("first", "last"))
classes |>
separate(instructor, c("students", "people"), sep = "enroll")
# (?<=[SP|FA]): any character *before* the split point is a "SP" or "FA"
# (?=2): the first character *after* the split point is a 2
classes |>
separate(sem,
c("semester", "year"),
"(?<=[SP|FA])(?=2)")
# More general:
# (?<=[a-zA-Z]): any character *before* the split point is a lower or upper case letter
# (?=[0-9]): the first character *after* the split point is number
classes |>
separate(sem,
c("semester", "year"),
"(?<=[A-Z])(?=[0-9])")
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")
# Check it out
head(courses)
# Construct a table that indicates the number of classes offered in each day/time slot
# Print only the 6 most popular time slots
courses |>
count(days, time) |>
arrange(desc(n)) |>
head()
courses_clean <- courses |>
separate(avail_max, c("avail", "max"), sep = " / ") |>
mutate(enroll = as.numeric(max) - as.numeric(avail)) |>
separate(number, c("dept", "number", "section"))
head(courses_clean)
# Identify the 6 departments that offered the most sections
courses_clean |>
count(dept) |>
arrange(desc(n)) |>
head()
# Identify the 6 departments with the longest average course titles
courses_clean |>
mutate(length = str_length(name)) |>
group_by(dept) |>
summarize(avg_length = mean(length)) |>
arrange(desc(avg_length)) |>
head()
courses_clean |>
filter(str_detect(instructor, "Alicia Johnson"))
stat <- courses_clean |>
filter(dept == "STAT") |>
mutate(name = str_replace(name, "Introduction to ", "")) |>
mutate(name = str_replace(name, "Statistical", "Stat")) |>
mutate(start_time = str_sub(time, 1, 5)) |>
select(number, name, start_time, enroll)
stat
stat <- courses_clean |>
filter(dept == "STAT") |>
mutate(name = str_replace(name, "Introduction to ", "")) |>
mutate(name = str_replace(name, "Statistical", "Stat")) |>
mutate(start_time = str_sub(time, 1, 5)) |>
select(number, name, start_time, enroll)
stat
dim(stat)
enrollments <- courses_clean |>
filter(dept != "PE", dept != "INTD") |>
filter(!(dept == "MUSI" & as.numeric(number) < 100)) |>
filter(!(dept == "THDA" & as.numeric(number) < 100)) |>
filter(!str_detect(section, "L"))
head(enrollments)
View(courses)
enrollments_in_engl <- courses_clean |>
filter(dept != "ENGL") |>
filter(!str_detect(section, "L"))
enrollments_in_engl <- courses_clean |>
filter(dept != "ENGL") |>
filter(!str_detect(section, "L"))
enrollments_in_engl
enrollments_in_engl <- courses_clean |>
filter(dept != "ENGL") |>
select(dept != "ENGL") |>
filter(!str_detect(section, "L"))
enrollments_in_engl <- courses_clean |>
filter(dept != "ENGL") |>
filter(!str_detect(section, "L"))
enrollments_in_engl
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
View(courses_clean)
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
courses_clean |>
filter(str_detect(dept, "ENGL"))
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
courses_clean |>
filter(str_detect(dept, "ENGL"))
courses_clean |>
filter(str_detect(dept, "POLI"))
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
courses_clean |>
filter(str_detect(dept, "ENGL"))
courses_clean |>
filter(str_detect(dept, "POLI"))
courses_clean |>
filter(str_detect(dept, "GEOG"))
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
courses_clean |>
filter(str_detect(dept, "ENGL"))
courses_clean |>
filter(str_detect(dept, "POLI"))
courses_clean |>
filter(str_detect(dept, "GEOG"))
courses_clean |>
filter(str_detect(room, "Library 250"))
courses_clean |>
filter(str_detect(instructor, "James Dawes"))
courses_clean |>
filter(str_detect(instructor, "Satoko Suzuki"))
courses_clean |>
filter(str_detect(dept, "ENGL"))
courses_clean |>
filter(str_detect(dept, "POLI"))
courses_clean |>
filter(str_detect(dept, "GEOG"))
courses_clean |>
filter(str_detect(room, "LIBR 250"))
# enrollments |>
#   filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
enrollments |>
filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
enrollments_2 <- enrollments |>
distinct(days, time, instructor, .keep_all = TRUE)
# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
enrollments_2 |>
filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
enrollments_2 |>
filter(instructor == "William Moseley")
enrollments_2 |>
filter(instructor == "William Moseley")
enrollments_2 |>
filter(instructor == "Sachiko Dorsey")
enrollments_2 |>
filter(instructor == "William Moseley")
enrollments_2 |>
filter(instructor == "Sachiko Dorsey")
enrollments_2 |>
filter(instructor == "Kyoshin Sasahara")
enrollments_2 |>
filter(instructor == "William Moseley")
enrollments_2 |>
filter(instructor == "Sachiko Dorsey")
enrollments_2 |>
filter(instructor == "Kyoshin Sasahara")
enrollments_2 |>
filter(instructor == "Arthur Mitchell")
# Make a bar plot showing the number of night courses by day of the week
# Use courses_clean
courses_clean |>
filter(str_detect(time, "7:00")) |>
ggplot(aes(x = days)) +
geom_bar()
