library(viridis)
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv")
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.6) +
scale_fill_viridis_d(option = "plasma") +
labs(
title = "Temperature Distribution at 3 PM by Location in Australian Cities",
x = "Temperature at 3 PM (°C)",
y = "Density",
fill = "Location",
caption = "Data Source: https://mac-stat.github.io/data/weather_3_locations.csv",
alt = "A density plot showing temperature distributions at 3 PM for different locations in Australian cities. Each location is represented by a different color."
) +
theme_minimal()
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.6) +
scale_fill_viridis_d(option = "plasma") +
labs(
title = "Temperature Distribution at 3 PM by Location in Australian Cities",
x = "Temperature at 3 PM (°C)",
y = "Density",
fill = "Location",
caption = "Data Source: https://mac-stat.github.io/data/weather_3_locations.csv, Plot by: Rachel Kelly, 2/19/2025",
alt = "A density plot showing temperature distributions at 3 PM for different locations in Australian cities. Each location is represented by a different color."
) +
theme_minimal()
# Import and check out data
education <- read.csv("https://mac-stat.github.io/data/sat.csv")
head(education)
library(tidyverse)
library(ggplot2)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
geom_smooth(se = TRUE, method = "loess") +
labs(
title = "Educational Expenditure vs. SAT Scores with Trend Line",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot with a trend line showing the relationship between per-student expenditure and SAT scores. A smooth line with a shaded confidence interval represents the trend."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
geom_smooth(se = TRUE, method = "loess") +
labs(
title = "Educational Expenditure vs. SAT Scores with Trend Line",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv, Plot by: Rachel Kelly, 2/19/2025",
alt = "A scatter plot with a trend line showing the relationship between per-student expenditure and SAT scores. A smooth line with a shaded confidence interval represents the trend."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
geom_smooth(se = TRUE, method = "loess") +
labs(
title = "Educational Expenditure vs. SAT Scores with Trend Line",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv, Plot by: Rachel Kelly, 3/12/2025",
alt = "A scatter plot with a trend line showing the relationship between per-student expenditure and SAT scores. A smooth line with a shaded confidence interval represents the trend."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
library(tidyverse)
library(mosaic)
library(mosaicData)
library(fivethirtyeight)
# Create the daily_births dataset
# Don't worry about the code. We'll learn this in the next unit!
data("Birthdays")
daily_births <- Birthdays |>
group_by(date) |>
summarize(births = sum(births)) |>
mutate(year = year(date),
month = month(date, label = TRUE),
day_of_month = mday(date),
day_of_week = wday(date, label = TRUE))
ggplot(daily_births, aes(x = year, y = births, color = day_of_week)) +
geom_line() +
facet_wrap(~ month) +
labs(
title = "Yearly Birth Trends by Month and Day of the Week",
x = "Year",
y = "Number of Births",
color = "Day of the Week",
caption = "Data Source: Mosaic Data - Daily Births",
alt = "A line plot showing the trend of daily births from 1969 to 1988, faceted by month. Each line represents a different day of the week, showing variations in births across different days.") +
scale_color_viridis_d(option = "plasma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(daily_births, aes(x = year, y = births, color = day_of_week)) +
geom_line() +
facet_wrap(~ month, rcol = 3) +
labs(
title = "Yearly Birth Trends by Month and Day of the Week",
x = "Year",
y = "Number of Births",
color = "Day of the Week",
caption = "Data Source: Mosaic Data - Daily Births",
alt = "A line plot showing the trend of daily births from 1969 to 1988, faceted by month. Each line represents a different day of the week, showing variations in births across different days.") +
scale_color_viridis_d(option = "plasma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(daily_births, aes(x = year, y = births, color = day_of_week)) +
geom_line() +
facet_wrap(~ month, rcol = 3) +
labs(
title = "Yearly Birth Trends by Month and Day of the Week",
x = "Year",
y = "Number of Births",
color = "Day of the Week",
caption = "Data Source: Mosaic Data - Daily Births",
alt = "A line plot showing the trend of daily births from 1969 to 1988, faceted by month. Each line represents a different day of the week, showing variations in births across different days.") +
scale_color_viridis_d(option = "plasma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(daily_births, aes(x = year, y = births, color = day_of_week)) +
geom_line() +
facet_wrap(~ month) +
labs(
title = "Yearly Birth Trends by Month and Day of the Week",
x = "Year",
y = "Number of Births",
color = "Day of the Week",
caption = "Data Source: Mosaic Data - Daily Births",
alt = "A line plot showing the trend of daily births from 1969 to 1988, faceted by month. Each line represents a different day of the week, showing variations in births across different days.") +
scale_color_viridis_d(option = "plasma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(daily_births, aes(x = year, y = births, color = day_of_week)) +
geom_line() +
facet_wrap(~ month) +
labs(
title = "Yearly Birth Trends by Month and Day of the Week",
x = "Year",
y = "Number of Births",
color = "Day of the Week",
caption = "Data Source: Mosaic Data - Daily Births, Plot by: Rachel Kelly, 3/12/2025",
alt = "A line plot showing the trend of daily births from 1969 to 1988, faceted by month. Each line represents a different day of the week, showing variations in births across different days.") +
scale_color_viridis_d(option = "plasma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Rachel's favorite places in the U.S. - used google maps for coordinates
favorite_stp <- tibble::tribble (
~place, ~long, ~lat, ~favorite,
"Macalester College", -93.1712321, 44.9378965, "no",
"Ramona California", -116.910632, 33.047826, "yes",
"Old Town San Diego", -117.196867, 32.754349, "no",
"Ototo", -104.980954, 39.689367, "yes",
"Portland Japanese Garden",-122.707993, 45.518796, "no",
"ABQ Golf Course", -106.618545, 35.098119, "yes",
"Boulder Hiking", -105.308957, 39.996407, "no",
"Lookout Mountain", -105.248476, 39.729449, "no",
"Mt Blue Sky", -105.641860, 39.587974, "no",
"Fern Canyon", -124.065181, 41.400873, "no")
#Load packaages
library("tibble")
library(ggplot2)
library(ggmap)
library(dplyr)
library(leaflet)
library("rnaturalearth")
library(ggrepel)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers()
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Times New Roman; text-align: center; color: purple;'>Rachel's Favorite Places Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue")
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv, Plot by: Rachel Kelly, 3/12/2025",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
geom_smooth(se = TRUE, method = "loess") +
labs(
title = "Educational Expenditure vs. SAT Scores with Trend Line",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv, Plot by: Rachel Kelly, 3/12/2025",
alt = "A scatter plot with a trend line showing the relationship between per-student expenditure and SAT scores. A smooth line with a shaded confidence interval represents the trend."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
#| fig-height: 22
#| fig-width: 11
#Don't think I'm using the above plot dimensions correctly.
# Summarize data to get total consumption per country per food category
fc_summary <- fc |>
group_by(country, food_category) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
#Get world map
world <- ne_countries(scale = "medium", returnclass = "sf") |>
select(name, geometry) |>
rename(country = name) #Renames a column (new name to old name) syntax
fc_map_data <- world |>
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data |>
filter(!is.na(geometry)) #making sure geometry is available for the maping to actually happen. I got geometry errors a bunch so had to mess around to try to fix that.
#Map Visualization
ggplot(fc_map_data) +
geom_sf(aes(fill = total_consumption), color = "white") +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") + #Color friendly palette
theme_minimal() +
labs(title = "Food Consumption by Country and Category",
subtitle = "Total food consumption across different countries, displayed by category",
caption = "Source: TidyTuesday 2020-02-18 | Data on global food consumption",
alt = "A world map showing food consumption by country and category. Each country is color-coded based on total consumption, with different facets representing various food categories.") + #Accessible labeling
facet_wrap(~food_category, ncol = 3) #make the facets
#| fig-height: 22
#| fig-width: 11
#Don't think I'm using the above plot dimensions correctly.
# Summarize data to get total consumption per country per food category
fc_summary <- fc |>
group_by(country, food_category) |>
summarize(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
#Get world map
world <- ne_countries(scale = "medium", returnclass = "sf") |>
select(name, geometry) |>
rename(country = name) #Renames a column (new name to old name) syntax
fc_map_data <- world |>
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data |>
filter(!is.na(geometry)) #making sure geometry is available for the maping to actually happen. I got geometry errors a bunch so had to mess around to try to fix that.
#Map Visualization
ggplot(fc_map_data) +
geom_sf(aes(fill = total_consumption), color = "white") +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") + #Color friendly palette
theme_minimal() +
labs(title = "Food Consumption by Country and Category",
subtitle = "Total food consumption across different countries, displayed by category",
caption = "Source: TidyTuesday 2020-02-18 | Data on global food consumption, Plot by: Rachel Kelly, 3/7/2025",
alt = "A world map showing food consumption by country and category. Each country is color-coded based on total consumption, with different facets representing various food categories.") + #Accessible labeling
facet_wrap(~food_category, ncol = 3) #make the facets
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme("void") +
labs(
title = "Median Household Income by County (Colorado, 2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau, ACS 5-Year Survey, Plot by: Rachel Kelly, 4/11/25") +
theme(
plot.title = element_text(face = "bold"),
legend.position = "right",
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)+
theme_minimal()
library(tidytuesdayR)
library(tidycensus)
library(tidyverse)
library(sf)
library(ggplot2)
#This is how I got Census data for CO
census_api_key("adf87e468258cd4568fc47061d8b6cf2cfc31b81", overwrite = TRUE, install = TRUE)
readRenviron("~/.Renviron")
# Load median household income data for every Colorado county
co_income <- get_acs(
geography = "county",
state = "CO",
variables = "B19013_001",
year = 2022,
survey = "acs5",
geometry = TRUE)
# variable category is the median household income variable name
# the geometry load county boundaries
#the survey chooses the data coded
head(co_income)
glimpse(co_income)
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme("void") +
labs(
title = "Median Household Income by County (Colorado, 2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau, ACS 5-Year Survey, Plot by: Rachel Kelly, 4/11/25") +
theme(
plot.title = element_text(face = "bold"),
legend.position = "right",
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)+
theme_minimal()
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme(void) +
labs(
title = "Median Household Income by County (Colorado, 2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau, ACS 5-Year Survey, Plot by: Rachel Kelly, 4/11/25") +
theme(
plot.title = element_text(face = "bold"),
legend.position = "right",
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)+
theme_minimal()
ggplot(co_income) +
geom_sf(aes(fill = estimate), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
theme_void() +
labs(
title = "Median Household Income by County (Colorado, 2022)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau, ACS 5-Year Survey, Plot by: Rachel Kelly, 4/11/25") +
theme(
plot.title = element_text(face = "bold"),
legend.position = "right",
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)+
theme_minimal()
tx_income <- get_acs(
geography = "county",
state = "TX",
variables = "B19013_001",
year = 2009,
survey = "acs5",
output = "wide",
geometry = TRUE)
head(tx_income)
ggplot(tx_income) +
geom_sf(aes(fill = B19013_001E), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90") +
labs(
title = "Median Household Income by County (Texas, 2009)",
fill = "Income ($)",
caption = "Source: U.S. Census Bureau, ACS 5-Year Survey, Plot by: Rachel Kelly, 4/11/25"
) +
theme_minimal()
#| echo: false
courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
# Check out the data
head(courses)
# Check out the structure of each variable
# Many of these are characters!
str(courses)
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv") |>
select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |>
mutate(dem_support_20 = case_when(
(repub_pct_20 - dem_pct_20 >= 5) ~ "low",
(repub_pct_20 - dem_pct_20 <= -5) ~ "high",
.default = "medium"
))
# Check it out
head(elections)
ggplot(elections, aes(x = dem_support_20)) +
geom_bar()
elections |>
count(dem_support_20)
str(elections)
# Notice that the order of the levels is not alphabetical!
elections <- elections |>
mutate(dem_support_20 = fct_relevel(dem_support_20, c("low", "medium", "high")))
# Notice the new structure of the dem_support_20 variable
str(elections)
# And plot dem_support_20
ggplot(elections, aes(x = dem_support_20)) +
geom_bar()
elections |>
count(dem_support_20)
# We can redefine any number of the category labels.
# Here we'll relabel all 3 categories:
elections <- elections |>
mutate(results_20 = fct_recode(dem_support_20,
"strong republican" = "low",
"close race" = "medium",
"strong democrat" = "high"))
# Check it out
# Note that the new category labels are still in a meaningful,
# not necessarily alphabetical, order!
elections |>
count(results_20)
# Note that we're just piping the data into ggplot instead of writing
# it as the first argument
elections |>
ggplot(aes(x = repub_pct_20, fill = state_abbr)) +
geom_density(alpha = 0.5)
library(ggridges)
elections |>
ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) +
geom_density_ridges() +
scale_fill_manual(values = c("blue", "purple", "red"))
# Since we might want states to be alphabetical in other parts of our analysis,
# we'll pipe the data into the ggplot without storing it:
elections |>
mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = "median")) |>
ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) +
geom_density_ridges() +
scale_fill_manual(values = c("blue", "purple", "red"))
# How did the code change?
# And the corresponding output?
elections |>
mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = "median", .desc = TRUE)) |>
ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) +
geom_density_ridges() +
scale_fill_manual(values = c("blue", "purple", "red"))
# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |>
distinct(sid, sessionID, .keep_all = TRUE)
# Check it out
head(grades)
grade_distribution <- grades |>
count(grade)
head(grade_distribution)
grade_distribution |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_relevel(grade, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "S", "AU"))) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_reorder(grade, n)) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_relevel(grade, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "S", "AU"))) |>
mutate(grade = fct_recode(grade, "Satisfactory" = "S", "Audit" = "AU")) |>  # Multiple pieces go into the last 2 blanks
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_relevel(grade, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "S", "AU"))) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_reorder(grade, n)) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |>
ggplot(aes(x = grade, y = n)) +
geom_col()
grade_distribution |>
mutate(grade = fct_relevel(grade, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "S", "AU"))) |>
mutate(grade = fct_recode(grade, "Satisfactory" = "S", "Audit" = "AU")) |>  # Multiple pieces go into the last 2 blanks
ggplot(aes(x = grade, y = n)) +
geom_col()
