geom_density_2d(
data = starbucks_cma,
aes(x = Longitude, y = Latitude),
size = 0.2,
color = "darkgreen"
) +
coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
theme_map()
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
# Don't worry about the code!
elections_by_state <- elections_by_state |>
filter(state_abbr != "DC") |>
select(state_name, state_abbr, repub_pct_20) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(30, 70, by = 5),
labels = c("30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-70"),
include.lowest = TRUE))
elections_by_counties <- elections_by_counties |>
select(state_name, state_abbr, county_name, county_fips,
repub_pct_20, median_age, median_rent) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(0, 100, by = 10),
labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80-89", "90-100"),
include.lowest = TRUE))
# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")
# Check it out
head(states_map)
head(states_map)
head(elections_by_state)
# Note where the dataset, elections_by_state, is used
# Note where the background map, states_map, is used
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map()
# Make it nicer!
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_gradientn(name = "% Republican", colors = c("blue", "purple", "red"), values = scales::rescale(seq(0, 100, by = 5)))
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map()
# Load package needed for refining color palette
library(RColorBrewer)
# Now fix the colors
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
# Get only the starbucks data from the US
starbucks_us <- starbucks |>
filter(Country == "US")
# Map it
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
geom_map(map = states_map) +
geom_point(
data = starbucks_us,
aes(x = Longitude, y = Latitude),
size = 0.05,
alpha = 0.2,
inherit.aes = FALSE
) +
expand_limits(x = states_map$long, y = states_map$lat) +
theme_map() +
scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map)
# Check it out
head(county_map)
head(county_map)
head(elections_by_counties)
# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |>
mutate(county_fips = as.character(county_fips)) |>
mutate(county_fips =
ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
geom_map(map = county_map) +
scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal()
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median rent", colors = c("white", "lightgreen", "darkgreen"))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median age", colors = terrain.colors(10))
ggplot(energy, aes(x = therms, fill = address)) +
geom_density(alpha = 0.5)
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_point()
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_line()
ggplot(energy, aes(y = therms, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
# A density plot isn't very helpful for comparing typical therms in this example!
ggplot(energy, aes(x = therms, fill = renovated)) +
geom_density(alpha = 0.5) +
facet_wrap(~ address)
# It happened to be colder outside after renovations (higher hdd)
ggplot(energy, aes(y = hdd, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
# When controlling for outside temps (via hdd), energy use decreased post-renovation
ggplot(energy, aes(y = therms, x = hdd, color = renovated)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ address)
leaflet(data = starbucks_mn) |>
addTiles() |>
addMarkers()
ggplot(starbucks, aes(y = Latitude, x = Longitude)) +
geom_point(size = 0.5)
ggplot(midwest_boundaries) +
geom_sf() +
geom_point(
data = starbucks_midwest,
aes(x = Longitude, y = Latitude),
alpha = 0.7,
size = 0.2,
color = 'darkgreen'
) +
theme_map()
# Point map (we made this earlier)
ggplot(cma_boundaries) +
geom_sf() +
geom_point(
data = starbucks_cma,
aes(x = Longitude, y = Latitude),
alpha = 0.3,
size = 0.2,
color = "darkgreen"
) +
coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
theme_map()
# What changed in the plot?
# What changed in our code?!
ggplot(cma_boundaries) +
geom_sf() +
geom_density_2d(
data = starbucks_cma,
aes(x = Longitude, y = Latitude),
size = 0.2,
color = "darkgreen"
) +
coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
theme_map()
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
# Don't worry about the code!
elections_by_state <- elections_by_state |>
filter(state_abbr != "DC") |>
select(state_name, state_abbr, repub_pct_20) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(30, 70, by = 5),
labels = c("30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-70"),
include.lowest = TRUE))
elections_by_counties <- elections_by_counties |>
select(state_name, state_abbr, county_name, county_fips,
repub_pct_20, median_age, median_rent) |>
mutate(repub_20_categories =
cut(repub_pct_20,
breaks = seq(0, 100, by = 10),
labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80-89", "90-100"),
include.lowest = TRUE))
# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |>
mutate(county_fips = as.character(county_fips)) |>
mutate(county_fips =
ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median rent", colors = c("white", "lightgreen", "darkgreen"))
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +
geom_map(map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
theme_map() +
theme(legend.position = "right") +
coord_equal() +
scale_fill_gradientn(name = "median age", colors = terrain.colors(10))
#Load packaages
library("tibble")
library(ggplot2)
library(ggmap)
library(dplyr)
library(leaflet)
library("rnaturalearth")
library(ggrepel)
#Rachel's favorite places in the U.S. - used google maps for coordinates
favorite_stp <- tribble (
~place, ~long, ~lat, ~favorite,
"Macalester College", -93.1712321, 44.9378965, "no",
"Ramona California", -116.910632, 33.047826, "yes",
"Old Town San Diego", -117.196867, 32.754349, "no",
"Ototo", -104.980954, 39.689367, "yes",
"Portland Japanese Garden",-122.707993, 45.518796, "no",
"ABQ Golf Course", -106.618545, 35.098119, "yes",
"Boulder Hiking", -105.308957, 39.996407, "no",
"Lookout Mountain", -105.248476, 39.729449, "no",
"Mt Blue Sky", -105.641860, 39.587974, "no",
"Fern Canyon", -124.065181, 41.400873, "no")
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers()
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~name, label = ~name) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Stops",
colors = "blue"
) |>
addAttribution("Data Source: [Insert Data Source Here]")
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~name, label = ~name) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Stops",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Stops",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Stops",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(long = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addControl(
html = "<strong>Favorite Stops Map</strong><br>A map showing favorite stops with markers.",
position = "topright"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
head(favorite_stp)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
setView(lng = mean(favorite_stp$longitude), lat = mean(favorite_stp$latitude), zoom = 12) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
head(favorite_stp)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>  # Adds interactive labels and popups
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
head(favorite_stp)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Arial; text-align: center; color: #333;'>Favorite Stops Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Arial; text-align: center; color: #333;'>Rachel's Favorite Places Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue"
)
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Times New Roman; text-align: center; color: #333;'>Rachel's Favorite Places Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue")
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Times New Roman; text-align: center; color: #222;'>Rachel's Favorite Places Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue")
leaflet(data = favorite_stp) |>
addTiles() |>
addMarkers(popup = ~place, label = ~place) |>
addControl(
html = "<h2 style='font-family: Times New Roman; text-align: center; color: purple;'>Rachel's Favorite Places Map</h2>",
position = "topleft"
) |>
addLegend(
position = "bottomright",
title = "Legend",
labels = "Favorite Places",
colors = "blue")
# Import and check out data
education <- read.csv("https://mac-stat.github.io/data/sat.csv")
head(education)
library(tidyverse)
library(ggplot2)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) + geom_smooth()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: [Insert Data Source Here]",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +  # Improves accessibility
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
labs(
title = "Relationship Between Educational Expenditure and SAT Scores",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot showing the relationship between per-student expenditure and SAT scores, with points colored by fraction category."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) +
geom_smooth(se = TRUE, method = "loess") +
labs(
title = "Educational Expenditure vs. SAT Scores with Trend Line",
x = "Per-Student Expenditure (in USD)",
y = "Average SAT Score",
color = "Fraction Category",
caption = "Data Source: https://mac-stat.github.io/data/sat.csv",
alt = "A scatter plot with a trend line showing the relationship between per-student expenditure and SAT scores. A smooth line with a shaded confidence interval represents the trend."
) +
scale_color_viridis_d(option = "plasma") +
theme_minimal()
# Create the new_bechdel dataset
# Don't worry about the code. We'll learn this in the next unit!
data(bechdel)
new_bechdel <- bechdel |>
mutate(clean_test = factor(clean_test, c("nowomen", "notalk", "men", "dubious", "ok"))) |>
mutate(half_decades = cut(year, breaks = seq(1969, 2014, by = 5)))
library(tidyverse)
library(mosaic)
library(fivethirtyeight)
# Create the daily_births dataset
# Don't worry about the code. We'll learn this in the next unit!
data("Birthdays")
daily_births <- Birthdays |>
group_by(date) |>
summarize(births = sum(births)) |>
mutate(year = year(date),
month = month(date, label = TRUE),
day_of_month = mday(date),
day_of_week = wday(date, label = TRUE))
# Create the daily_births dataset
# Don't worry about the code. We'll learn this in the next unit!
data("Birthdays")
daily_births <- Birthdays |>
group_by(date) |>
summarize(births = sum(births)) |>
mutate(year = year(date),
month = month(date, label = TRUE),
day_of_month = mday(date),
day_of_week = wday(date, label = TRUE))
# Create the daily_births dataset
# Don't worry about the code. We'll learn this in the next unit!
data("Birthdays")
daily_births <- Birthdays |>
group_by(date) |>
summarize(births = sum(births)) |>
mutate(year = year(date),
month = month(date, label = TRUE),
day_of_month = mday(date),
day_of_week = wday(date, label = TRUE))
