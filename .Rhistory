left_join(enrollments_2, join_by(class == course))
#| eval: false  # keep this false since it will produce an error
# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
students_2 |>
left_join(enrollments_2, join_by(course == class))
# Add student grades in each course
students_3 <- data.frame(
student = c("Y", "Y", "Z", "Z"),
class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
grade = c("B", "S", "C", "A")
)
# Check it out
students_3
# Add average grades in each course
enrollments_3 <- data.frame(
class = c("ART 101", "BIOL 101","COMP 101"),
grade = c("B", "A", "A-"),
enrollment = c(20, 18, 19)
)
# Check it out
enrollments_3
students_3 |>
left_join(enrollments_3)
students_3 |>
left_join(enrollments_3, join_by(class == class))
# People who have voted
voters <- data.frame(
id = c("A", "D", "E", "F", "G"),
times_voted = c(2, 4, 17, 6, 20)
)
voters
# Contact info for voting age adults
contact <- data.frame(
name = c("A", "B", "C", "D"),
address = c("summit", "grand", "snelling", "fairview"),
age = c(24, 89, 43, 38)
)
contact
# 1. We want contact info for people who HAVEN'T voted
contact |>
anti_join(voters, join_by(name == id))
# 2. We want contact info for people who HAVE voted
contact |>
semi_join(voters, join_by(name == id))
# 3. We want any data available on each person
contact |>
full_join(voters, join_by(name == id))
voters |>
full_join(contact, join_by(id == name))
# 4. When possible, we want to add contact info to the voting roster
voters |>
left_join(contact, join_by(id == name))
#| echo: false
# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |>
distinct(sid, sessionID, .keep_all = TRUE)
head(grades)
#| echo: false
courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
head(courses)
# How many observations (rows) and variables (columns) are there in the grades data?
dim(grades)
# How many observations (rows) and variables (columns) are there in the courses data?
dim(courses)
courses |>
count(sessionID) |>
filter(n > 1)
courses |>
filter(sessionID == "session2047")
# courses_combined <- courses |>
#   ___(sessionID) |>
#   ___(enroll = sum(___))
# Check that this has 1695 rows and 2 columns
# dim(courses_combined)
courses_combined <- courses |>
group_by(sessionID) |>
summarize(enroll = sum(enroll))
# Check that this has 1695 rows and 2 columns
dim(courses_combined)
courses_combined |>
summarize(median(enroll))
student_class_size <- grades |>
left_join(courses_combined) |>
group_by(sid) |>
summarize(med_class = median(enroll))
head(student_class_size)
# ggplot(student_class_size, aes(x = ___)) +
#   geom___()
ggplot(student_class_size, aes(x = med_class)) +
geom_histogram(color = "white")
# ggplot(student_class_size, aes(x = ___)) +
#   geom___()
ggplot(student_class_size, aes(x = med_class)) +
geom_histogram(color = "darkgreen")
# ggplot(student_class_size, aes(x = ___)) +
#   geom___()
ggplot(student_class_size, aes(x = med_class)) +
geom_histogram(color = "orange", fill = "blue")
grades |>
filter(sessionID == "session1986")
dept_E <- courses |>
filter(dept == "E")
grades |>
semi_join(dept_E)
courses |>
group_by(dept) |>
summarize(total = sum(enroll)) |>
arrange(desc(total))
grades |>
left_join(gpa_conversion) |>
group_by(sid) |>
summarize(mean(gp, na.rm = TRUE))
grades |>
left_join(gpa_conversion) |>
group_by(sid) |>
summarize(gpa = mean(gp, na.rm = TRUE)) |>
summarize(median(gpa))
grades |>
left_join(gpa_conversion) |>
mutate(below_b_plus = (gp < 3.3)) |>
summarize(mean(below_b_plus, na.rm = TRUE))
grades |>
left_join(gpa_conversion) |>
left_join(courses) |>
group_by(iid) |>
summarize(gpa = mean(gp, na.rm = TRUE)) |>
arrange(gpa)
cross_listed <- courses |>
count(sessionID) |>
filter(n > 1)
grades |>
anti_join(cross_listed) |>
inner_join(courses) |>
left_join(gpa_conversion) |>
group_by(dept) |>
summarize(gpa = mean(gp, na.rm = TRUE)) |>
arrange(gpa)
library(tidyverse)
library(tidyverseR)
library(tidyverse)
library(tidytuesdayR)
library(tidyverse)
library(tidytuesdayR)
library(tidytuesdayR)
library(tidyverse)
tuesdata <- tt_load('2020-02-18')
fc <- tuesdata$food_consumption
head(fc)
dim(fc)
str(fc)
nrow(fc)
tail(fc)
head(fc)
dim(fc)
str(fc)
nrow(fc)
tail(fc)
head(22)
head(fc)
dim(fc)
str(fc)
nrow(fc)
tail(fc)
head(fc, "22")
head(fc)
dim(fc)
str(fc)
nrow(fc)
tail(fc)
head(fc, 22)
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_col(fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme()
library(ggplot2)
# Bar Graph
ggplot(fc, aes(x = food_category, y = consumption)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Food Consumption by Category",
x = "Food Category",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fc, aes(x = consumption)) +
geom_histogram(binwidth = 10, fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Consumption",
y = "Count")
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption")
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = .5))
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 1))
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 4))
ggplot(fc, aes(x = country, y = consumption)) +
geom_boxplot(fill = "darkorange", color = "black") +
theme_minimal() +
labs(title = "Distribution of Food Consumption",
x = "Country",
y = "Consumption") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3.5))
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
install.packages(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
install.packages("rnaturalearthdata")
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE))
# World map visualization with facets for each food category
ggplot() +
geom_sf(data = world, fill = "gray90", color = "white") +
geom_sf(data = fc_summary, aes(fill = total_consumption, geometry = geometry), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE))
# World map visualization with facets for each food category
ggplot() +
geom_sf(data = world, fill = "gray90", color = "white") +
geom_sf(data = fc_summary, aes(fill = total_consumption, geometry = geometry), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE))
# World map visualization with facets for each food category
ggplot() +
geom_sf(data = world, fill = "gray90", color = "white") +
geom_sf(data = fc_summary, aes(fill = total_consumption), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
View(fc)
View(fc_summary)
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
rename(country = name)  # Ensure the column name matches fc_summary
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
rename(country = name)  # Ensure the column name matches fc_summary
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearth)
# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# Merge with world map to get geometry
fc_map_data <- world %>%
left_join(fc_summary, by = "country")
View(fc_summary)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(fill = total_consumption, geometry = geometry), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
View(tuesdata)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(fill = total_consumption), color = NA) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- world %>%
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
# World map visualization with facets for each food category
ggplot(fc_summary) +
geom_sf(aes(color = total_consumption, geometry = country)) +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
ggplot(world_boundaries) +
geom_sf()
# Aggregate data to get total consumption per country per food category
fc_summary <- fc %>%
group_by(country, food_category) %>%
summarise(total_consumption = sum(consumption, na.rm = TRUE), .groups = "drop")
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
select(name, geometry) %>%
rename(country = name)
fc_map_data <- world %>%
right_join(fc_summary, by = "country")
fc_map_data <- fc_map_data %>% filter(!is.na(geometry))
# World map visualization with facets for each food category
ggplot(fc_map_data) +
geom_sf(aes(fill = total_consumption), color = "white") +
scale_fill_viridis_c(option = "plasma", name = "Consumption", na.value = "grey80") +
theme_minimal() +
labs(title = "Food Consumption by Country and Category") +
facet_wrap(~food_category)
