weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(6)
# What are the units of observation?
# How many data points do we have?
# What type of variables do we have?
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(weather)
# What are the units of observation?
# How many data points do we have?
# What type of variables do we have?
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(weather)
head(6, weather)
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(weather)
head(6)
# What are the units of observation?
# How many data points do we have?
# What type of variables do we have?
?head
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(weather)
head(weather, 6)
# What are the units of observation?
# How many data points do we have?
# What type of variables do we have?
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
nrow(weather)
head(weather)
# What are the units of observation?
# How many data points do we have?
# What type of variables do we have?
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
head(weather)
# What are the units of observation?
# 24 variables
# How many data points do we have?
nrow(weather)
# What type of variables do we have?
str(weather)
ggplot(weather, aes(x = temp3pm)) + geom_density()
# Plot 1 (no facets & starting from a density plot of temp3pm)
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.6)
# Plot 2 (no facets or densities)
ggplot(weather, aes(y = temp3pm, x = location)) +
geom_boxplot()
# Plot 3 (facets)
ggplot(weather, aes(x = temp3pm, fill = location)) +
geom_density(alpha = 0.5) +
facet_wrap(~ location)
# Don't worry about the syntax (we'll learn it soon)
woll <- weather |>
filter(location == "Wollongong") |>
mutate(date = as.Date(date))
# How often does it raintoday?
# Fill your geometric layer with the color blue.
ggplot(woll, aes(x = raintoday))
# How often does it raintoday?
# Fill your geometric layer with the color blue.
ggplot(woll, aes(x = raintoday)) + geom_bar(fill = "blue")
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday))
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday, y = raintomorrow)) + geom_bar()
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + geom_bar()
# Now compare different approaches
# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
geom_bar()
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
head(weather)
# What are the units of observation?
# 24 variables
# How many data points do we have?
nrow(weather)
# What type of variables do we have?
str(weather)
# Now compare different approaches
# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
geom_bar()
# Don't worry about the syntax (we'll learn it soon)
woll <- weather |>
filter(location == "Wollongong") |>
mutate(date = as.Date(date))
# Now compare different approaches
# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
geom_bar()
# Side-by-side bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "dodge")
# Proportional bars
# position = "fill" refers to filling the frame, nothing to do with the color-related fill
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "fill")
# THINK: What variable goes on the y-axis?
# For the curve, try adding span = 0.5 to tweak the curvature
ggplot(woll, aes(y = temp3pm, x = date)) +
geom_point() +
geom_smooth(span = 0.5)
# Instead of a curve that captures the general TREND,
# draw a line that illustrates the movement of RAW temperatures from day to day
# NOTE: We haven't learned this geom yet! Guess.
ggplot(woll, aes(y = temp3pm, x = date)) + gemo_line()
# Instead of a curve that captures the general TREND,
# draw a line that illustrates the movement of RAW temperatures from day to day
# NOTE: We haven't learned this geom yet! Guess.
ggplot(woll, aes(y = temp3pm, x = date)) + geom_line()
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am)) +
geom_point()
library(tidyverse)
# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |>
mutate(date = as.Date(date))
# Check out the first 6 rows
head(weather)
# What are the units of observation?
# 24 variables
# How many data points do we have?
nrow(weather)
# What type of variables do we have?
str(weather)
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am)) +
geom_point()
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point()
# Change the code in order to indicate the location to which each data point corresponds
# AND identify the days on which it rained / didn't raintoday
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point() + facet_wrap(raintoday)
# Change the code in order to indicate the location to which each data point corresponds
# AND identify the days on which it rained / didn't raintoday
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) +
geom_point() + facet_wrap(~raintoday)
# How many ways can you think to make that plot of temp3pm vs temp9am with info about location and rain?
# Play around!
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location, shape = raintoday)) +
geom_point()
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date)) +
geom_line()
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date, color = location)) +
geom_line()
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "fill")
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "fill") + facet_wrap(location)
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "fill") +
facet_wrap(~ location)
# Import and check out data
education <- read.csv("https://mac-stat.github.io/data/sat.csv")
head(education)
ggplot(education, aes(x = sat)) +
geom_density()
# Construct a plot of sat vs expend
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(y = sat, x = expend)) +
geom_point() +
geom_smooth(method = "lm")
# Construct a plot of sat vs salary
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(y = sat, x = salary)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(education, aes(y = sat, x = salary, color = expend)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(education, aes(y = sat, x = salary, color = cut(expend, 2))) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
ggplot(education, aes(x = fracCat)) +
geom_bar()
ggplot(education, aes(x = sat, fill = fracCat)) +
geom_density(alpha = 0.5)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5)
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
geom_point(alpha = 0.5) + geom_smooth()
# Remove the "State" column and use it to label the rows
# Then scale the variables
plot_data <- education |>
column_to_rownames("State") |>
data.matrix() |>
scale()
# Load the gplots package needed for heatmaps
library(gplots)
# Construct heatmap 1
heatmap.2(plot_data,
dendrogram = "none",
Rowv = NA,
scale = "column",
keysize = 0.7,
density.info = "none",
col = hcl.colors(256),
margins = c(10, 20),
colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
sepcolor = "white", trace = "none"
)
# Construct heatmap 2
heatmap.2(plot_data,
dendrogram = "none",
Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE
scale = "column",
keysize = 0.7,
density.info = "none",
col = hcl.colors(256),
margins = c(10, 20),
colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
sepcolor = "white", trace = "none"
)
# Construct heatmap 3
heatmap.2(plot_data,
dendrogram = "row",       ### WE CHANGED THIS FROM "none" TO "row"
Rowv = TRUE,
scale = "column",
keysize = 0.7,
density.info = "none",
col = hcl.colors(256),
margins = c(10, 20),
colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
sepcolor = "white", trace = "none"
)
stars(plot_data,
flip.labels = FALSE,
key.loc = c(10, 1.5),
cex = 1,
draw.segments = TRUE
)
stars(plot_data,
flip.labels = FALSE,
locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location
key.loc = c(-110, 28),
cex = 1,
draw.segments = TRUE
)
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) +
geom_bar(position = "fill") +
facet_wrap(~ location)
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date, color = location)) +
geom_line()
ggplot(education, aes(x = sat)) +
geom_density(fill = "pink")
# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
head(hikes)
# Use the ggplot function
# Load the package
library(tidyverse)
# Use the ggplot function
ggplot(hikes, aes(x = rating))
#| eval: true
#| message: false
# Load the package
library(tidyverse)
ggplot(hikes, aes(x = rating))
# This made it a bar plot.
ggplot(hikes, aes(x = rating)) +
geom_bar()
# Makes access labels.
ggplot(hikes, aes(x = rating)) +
geom_bar() +
labs(x = "Rating", y = "Number of hikes")
# This function filles the bars with blue or a corresponding color.
ggplot(hikes, aes(x = rating)) +
geom_bar(fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Outlines it in orange.
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Changed the theme. Changed the background color
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue")  +
labs(x = "Rating", y = "Number of hikes") +
theme_minimal()
ggplot(hikes, aes(x = elevation)) + geom_histogram()
ggplot(hikes, aes(x = elevation)) +geom_histogram()
# Made a histogram
ggplot(hikes, aes(x = elevation)) +
geom_histogram()
# Added white outlines of each column
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white")
# Filled with blue
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", fill = "blue")
# Changed the x and y axis labels
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white") +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Changed the ranges of the columns or the bin width
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 1000) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Made the bin width way smaller
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 5) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Changed the bin width again to make it more reasonable
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
ggplot(hikes, aes(x = elevation)) +
geom_density()
ggplot(hikes, aes(x = elevation)) +
geom_density(color = "blue", fill = "orange")
# YUCK
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# YUCK HARD TO READ
ggplot(hikes, aes(x = elevation)) + geom_histogram(color = "white", binwidth = 200) + labs(x = "Elevation (feet)", y = "Number of hikes")
# Data on students in this class
survey <- read.csv("https://hash-mac.github.io/stat112site-s25/data/survey.csv")
ggplot(survey, aes(x=hangout))+geom_bar(color = "pink", fill = "purple")
# World Cup data
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
#| eval: true
ggplot(hikes, aes(x = rating))
#| eval: true
# Add a bar plot LAYER
ggplot(hikes, aes(x = rating)) +
geom_bar()
# Add meaningful axis labels
ggplot(hikes, aes(x = rating)) +
geom_bar() +
labs(x = "Rating", y = "Number of hikes")
# FILL the bars with blue
ggplot(hikes, aes(x = rating)) +
geom_bar(fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# COLOR the outline of the bars in orange
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue") +
labs(x = "Rating", y = "Number of hikes")
# Change the theme to a white background
ggplot(hikes, aes(x = rating)) +
geom_bar(color = "orange", fill = "blue")  +
labs(x = "Rating", y = "Number of hikes") +
theme_minimal()
#| eval: true
ggplot(hikes, aes(x = elevation)) +
geom_bar()
#| eval: true
# Add a histogram layer
ggplot(hikes, aes(x = elevation)) +
geom_histogram()
# Outline the bars in white
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white")
# Fill the bars in blue
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", fill = "blue")
# Add axis labels
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white") +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 1000 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 1000) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 5 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 5) +
labs(x = "Elevation (feet)", y = "Number of hikes")
# Change the width of the bins to 200 feet
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
#| eval: true
ggplot(hikes, aes(x = elevation)) +
geom_density(color = "blue", fill = "orange")
?lua
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
# Load tidyverse package for plotting and wrangling
library(tidyverse)
# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |>
mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |>
filter(address != "c")
# Check it out
head(energy)
ggplot(energy, aes(x = therms, fill = address)) +
geom_density(alpha = 0.5)
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_point()
ggplot(energy, aes(y = therms, x = date, color = address)) +
geom_line()
ggplot(energy, aes(y = therms, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
ggplot(energy, aes(x = therms, fill = renovated)) +
geom_density(alpha = 0.5) +
facet_wrap(~ address)
ggplot(energy, aes(y = hdd, x = renovated)) +
geom_boxplot() +
facet_wrap(~ address)
ggplot(energy, aes(y = therms, x = hdd, color = renovated)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ address)
fave_places <- read.csv("https://ajohns24.github.io/data/112/our_fave_places.csv")
# Check it out
head(fave_places)
View(fave_places)
# Load the leaflet package
library(leaflet)
# Just a plotting frame
leaflet(data = fave_places)
# Now what do we have?
leaflet(data = fave_places) |>
addTiles()
# Now what do we have?
# longitude and latitude refer to the variables in our data
leaflet(data = fave_places) |>
addTiles() |>
addMarkers(lng = ~longitude, lat = ~latitude)
# Since we named them "longitude" and "latitude", the function
# automatically recognizes these variables. No need to write them!
leaflet(data = fave_places) |>
addTiles() |>
addMarkers()
# Load package needed to change color
library(gplots)
# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |>
addTiles() |>
addCircles(color = col2hex("red"))
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
addProviderTiles("USGS") |>
addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
addPolylines(
lng = ~longitude,
lat = ~latitude,
color = col2hex("green")
)
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
# Don't worry about the syntax
starbucks_mn <- starbucks |>
filter(Country == "US", State.Province == "MN")
leaflet(data = starbucks) |>
addTiles() |>
addMarkers(lng = ~longitude, lat = ~latitude)
leaflet(data = starbucks) |>
addTiles() |>
addMarkers()
